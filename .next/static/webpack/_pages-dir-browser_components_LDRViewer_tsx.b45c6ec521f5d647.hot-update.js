"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_pages-dir-browser_components_LDRViewer_tsx",{

/***/ "(pages-dir-browser)/./components/LDRViewer.tsx":
/*!**********************************!*\
  !*** ./components/LDRViewer.tsx ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(pages-dir-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls.js */ \"(pages-dir-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js\");\n/* harmony import */ var three_examples_jsm_loaders_LDrawLoader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three/examples/jsm/loaders/LDrawLoader.js */ \"(pages-dir-browser)/./node_modules/three/examples/jsm/loaders/LDrawLoader.js\");\n/* harmony import */ var three_examples_jsm_materials_LDrawConditionalLineMaterial_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three/examples/jsm/materials/LDrawConditionalLineMaterial.js */ \"(pages-dir-browser)/./node_modules/three/examples/jsm/materials/LDrawConditionalLineMaterial.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\nconst LDRViewerComponent = (param)=>{\n    let { modelPath, ldrawContent, preserveCamera } = param;\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const sceneRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const rendererRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const cameraRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const controlsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const modelGroupRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const loadingManagerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const isLoadingRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const currentModelPathRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)('');\n    const isInitializedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const errorCountRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    // Error state for displaying messages\n    const [loadError, setLoadError] = react__WEBPACK_IMPORTED_MODULE_1___default().useState(null);\n    // Camera state preservation\n    const savedCameraPosition = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const savedCameraTarget = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Step control\n    const [currentStep, setCurrentStep] = react__WEBPACK_IMPORTED_MODULE_1___default().useState(1);\n    const [totalSteps, setTotalSteps] = react__WEBPACK_IMPORTED_MODULE_1___default().useState(1);\n    const stepsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const allPartsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    // Create loading manager only once\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            if (loadingManagerRef.current) return;\n            const manager = new three__WEBPACK_IMPORTED_MODULE_2__.LoadingManager();\n            // Implement path resolution strategy similar to Three.js packLDrawModel\n            manager.setURLModifier({\n                \"LDRViewerComponent.useEffect\": (url)=>{\n                    // console.log('Original URL:', url);\n                    // Normalize path separators\n                    let normalized = url.replace(/\\\\/g, '/');\n                    // Handle s\\ prefix for subparts (convert s\\file.dat to s/file.dat)\n                    if (normalized.includes('s/') || normalized.match(/s[\\\\\\/]/)) {\n                        const parts = normalized.split(/[\\\\\\/]/);\n                        const lastTwo = parts.slice(-2);\n                        if (lastTwo[0] === 's') {\n                            // This is a subpart reference\n                            normalized = \"/ldraw/parts/s/\".concat(lastTwo[1]);\n                            // console.log('Subpart detected, normalized to:', normalized);\n                            return normalized;\n                        }\n                    }\n                    // Extract the filename and check for subdirectory (like s/)\n                    const urlParts = normalized.split('/');\n                    const filename = urlParts[urlParts.length - 1].toLowerCase();\n                    const hasSubdir = urlParts.length >= 2 && urlParts[urlParts.length - 2] === 's';\n                    // Define possible path prefixes to try\n                    const pathPrefixes = [\n                        '/output/',\n                        '/ldraw/',\n                        '/ldraw/p/',\n                        '/ldraw/parts/'\n                    ];\n                    // If the URL already has a valid prefix, clean it up\n                    for (const prefix of pathPrefixes){\n                        if (normalized.includes(prefix)) {\n                            // Clean up any duplicate path segments\n                            normalized = normalized.replace(/\\/ldraw\\/parts\\/parts\\//g, '/ldraw/parts/');\n                            normalized = normalized.replace(/\\/ldraw\\/p\\/p\\//g, '/ldraw/p/');\n                            normalized = normalized.replace(/\\/output\\/output\\//g, '/output/');\n                            // Remove any redundant path combinations but preserve s/ subdirectory\n                            if (!normalized.includes('/s/')) {\n                                normalized = normalized.replace(/\\/ldraw\\/parts\\/p\\//g, '/ldraw/p/');\n                                normalized = normalized.replace(/\\/output\\/p\\//g, '/ldraw/p/');\n                                normalized = normalized.replace(/\\/ldraw\\/p\\/parts\\//g, '/ldraw/parts/');\n                                normalized = normalized.replace(/\\/output\\/parts\\//g, '/ldraw/parts/');\n                            } else {\n                                // Handle subparts in s/ directory\n                                normalized = normalized.replace(/\\/ldraw\\/parts\\/parts\\/s\\//g, '/ldraw/parts/s/');\n                                normalized = normalized.replace(/\\/ldraw\\/p\\/parts\\/s\\//g, '/ldraw/parts/s/');\n                                normalized = normalized.replace(/\\/output\\/parts\\/s\\//g, '/ldraw/parts/s/');\n                            }\n                            // console.log('Normalized URL:', normalized);\n                            return normalized;\n                        }\n                    }\n                    // If no valid prefix found, try to construct the path\n                    // This handles cases where the URL is just a filename or relative path\n                    if (!normalized.startsWith('/ldraw/')) {\n                        // Handle subparts (files in s/ directory)\n                        if (hasSubdir) {\n                            normalized = \"/ldraw/parts/s/\".concat(filename);\n                        } else if (filename.match(/^\\d/) || filename.startsWith('stud') || filename.startsWith('edge')) {\n                            normalized = \"/ldraw/p/\".concat(filename);\n                        } else if (filename.endsWith('.dat')) {\n                            normalized = \"/ldraw/parts/\".concat(filename);\n                        } else if (filename.endsWith('.ldr') || filename.endsWith('.mpd')) {\n                            normalized = \"/output/\".concat(filename);\n                        }\n                    // console.log('Constructed URL:', normalized);\n                    }\n                    return normalized;\n                }\n            }[\"LDRViewerComponent.useEffect\"]);\n            loadingManagerRef.current = manager;\n            return ({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    manager.setURLModifier(undefined);\n                    loadingManagerRef.current = null;\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n        }\n    }[\"LDRViewerComponent.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            if (!containerRef.current || isInitializedRef.current) return;\n            isInitializedRef.current = true;\n            const container = containerRef.current;\n            const width = container.clientWidth;\n            const height = container.clientHeight;\n            const scene = new three__WEBPACK_IMPORTED_MODULE_2__.Scene();\n            scene.background = new three__WEBPACK_IMPORTED_MODULE_2__.Color(0xeeeeee);\n            sceneRef.current = scene;\n            // Camera with settings optimized for large LEGO models\n            const camera = new three__WEBPACK_IMPORTED_MODULE_2__.PerspectiveCamera(45, width / height, 0.1, 100000);\n            camera.position.set(300, 400, 700);\n            cameraRef.current = camera;\n            const renderer = new three__WEBPACK_IMPORTED_MODULE_2__.WebGLRenderer({\n                antialias: true\n            });\n            renderer.setSize(width, height);\n            renderer.setPixelRatio(window.devicePixelRatio);\n            container.appendChild(renderer.domElement);\n            rendererRef.current = renderer;\n            const controls = new three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_3__.OrbitControls(camera, renderer.domElement);\n            controls.enableDamping = true;\n            controls.dampingFactor = 0.05;\n            controls.enablePan = true;\n            controls.enableRotate = true;\n            controls.enableZoom = true;\n            controls.screenSpacePanning = false;\n            controls.minDistance = 10;\n            controls.maxDistance = 50000; // Greatly increased max zoom out distance\n            controls.target.set(0, 0, 0);\n            controlsRef.current = controls;\n            // Enhanced lighting for better visibility\n            scene.add(new three__WEBPACK_IMPORTED_MODULE_2__.AmbientLight(0xffffff, 0.9)); // Brighter ambient light\n            // Main directional light\n            const dirLight = new three__WEBPACK_IMPORTED_MODULE_2__.DirectionalLight(0xffffff, 1.0);\n            dirLight.position.set(500, 1000, 500);\n            dirLight.castShadow = false;\n            scene.add(dirLight);\n            // Additional fill lights from different angles\n            const fillLight1 = new three__WEBPACK_IMPORTED_MODULE_2__.DirectionalLight(0xffffff, 0.5);\n            fillLight1.position.set(-500, 500, -500);\n            scene.add(fillLight1);\n            const fillLight2 = new three__WEBPACK_IMPORTED_MODULE_2__.DirectionalLight(0xffffff, 0.5);\n            fillLight2.position.set(500, 500, -500);\n            scene.add(fillLight2);\n            // Add a hemisphere light for more natural lighting\n            const hemiLight = new three__WEBPACK_IMPORTED_MODULE_2__.HemisphereLight(0xffffff, 0xcccccc, 0.4);\n            hemiLight.position.set(0, 500, 0);\n            scene.add(hemiLight);\n            // Grid helper removed\n            // const gridHelper = new THREE.GridHelper(1000, 20);\n            // scene.add(gridHelper);\n            // Add axes helper\n            const axesHelper = new three__WEBPACK_IMPORTED_MODULE_2__.AxesHelper(500);\n            scene.add(axesHelper);\n            const handleResize = {\n                \"LDRViewerComponent.useEffect.handleResize\": ()=>{\n                    if (!containerRef.current || !cameraRef.current || !rendererRef.current) return;\n                    const w = containerRef.current.clientWidth;\n                    const h = containerRef.current.clientHeight;\n                    rendererRef.current.setSize(w, h);\n                    cameraRef.current.aspect = w / h;\n                    cameraRef.current.updateProjectionMatrix();\n                }\n            }[\"LDRViewerComponent.useEffect.handleResize\"];\n            window.addEventListener('resize', handleResize);\n            // Animation loop is now handled in the cube effect\n            console.log('Scene initialized');\n            return ({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    window.removeEventListener('resize', handleResize);\n                // Keep renderer intact but clean up event listener\n                // if (rendererRef.current && containerRef.current) {\n                //   containerRef.current.removeChild(rendererRef.current.domElement);\n                //   rendererRef.current.dispose();\n                // }\n                // isInitializedRef.current = false;\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n        }\n    }[\"LDRViewerComponent.useEffect\"], []);\n    // Animation loop - using useRef to ensure single instance\n    const animationIdRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const isAnimatingRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            if (!sceneRef.current || !rendererRef.current || !cameraRef.current || !controlsRef.current) return;\n            // Prevent multiple animation loops\n            if (isAnimatingRef.current) {\n                console.log('Animation already running, skipping...');\n                return;\n            }\n            // Commented out cancellation\n            // if (animationIdRef.current !== null) {\n            //   cancelAnimationFrame(animationIdRef.current);\n            // }\n            isAnimatingRef.current = true;\n            const animate = {\n                \"LDRViewerComponent.useEffect.animate\": ()=>{\n                    if (!isAnimatingRef.current) return;\n                    // Check all refs before scheduling next frame\n                    if (!controlsRef.current || !rendererRef.current || !sceneRef.current || !cameraRef.current) {\n                        console.warn('Animation loop stopped: missing refs');\n                        isAnimatingRef.current = false;\n                        return;\n                    }\n                    animationIdRef.current = requestAnimationFrame(animate);\n                    try {\n                        // Only validate scene if we've had recent errors\n                        if (errorCountRef.current > 0 && errorCountRef.current < 5) {\n                            let hasNullChildren = false;\n                            let nullCheckCount = 0;\n                            sceneRef.current.traverse({\n                                \"LDRViewerComponent.useEffect.animate\": (child)=>{\n                                    nullCheckCount++;\n                                    // Check if the object itself has required properties\n                                    if (!child.hasOwnProperty('visible')) {\n                                        console.error('Object missing visible property:', child);\n                                    }\n                                    if (child.children) {\n                                        for(let i = 0; i < child.children.length; i++){\n                                            if (child.children[i] === null || child.children[i] === undefined) {\n                                                console.error('Found null/undefined child in scene at index', i, 'of parent:', child);\n                                                hasNullChildren = true;\n                                                // Remove the null child\n                                                child.children.splice(i, 1);\n                                                i--; // Adjust index after removal\n                                            }\n                                        }\n                                    }\n                                }\n                            }[\"LDRViewerComponent.useEffect.animate\"]);\n                            if (hasNullChildren) {\n                                console.warn('Cleaned null children from scene graph after checking', nullCheckCount, 'objects');\n                            }\n                        }\n                        // Update controls and render\n                        // Validate controls state before updating\n                        if (controlsRef.current) {\n                            // Check if controls target is valid\n                            if (!isFinite(controlsRef.current.target.x) || !isFinite(controlsRef.current.target.y) || !isFinite(controlsRef.current.target.z)) {\n                                console.warn('OrbitControls target became invalid, resetting to origin');\n                                controlsRef.current.target.set(0, 0, 0);\n                            }\n                            controlsRef.current.update();\n                        }\n                        // Clean up any null objects in the scene before rendering\n                        const cleanupNullObjects = {\n                            \"LDRViewerComponent.useEffect.animate.cleanupNullObjects\": (obj)=>{\n                                if (!obj || !obj.children) return;\n                                // Filter out null/undefined children\n                                const validChildren = [];\n                                for(let i = 0; i < obj.children.length; i++){\n                                    const child = obj.children[i];\n                                    if (child !== null && child !== undefined && child.visible !== undefined) {\n                                        validChildren.push(child);\n                                        cleanupNullObjects(child); // Recursively clean children\n                                    }\n                                }\n                                // Only update if we removed something\n                                if (validChildren.length !== obj.children.length) {\n                                    obj.children = validChildren;\n                                }\n                            }\n                        }[\"LDRViewerComponent.useEffect.animate.cleanupNullObjects\"];\n                        if (sceneRef.current) {\n                            cleanupNullObjects(sceneRef.current);\n                        }\n                        rendererRef.current.render(sceneRef.current, cameraRef.current);\n                        // Reset error counter on successful render\n                        if (errorCountRef.current > 0) {\n                            console.log('Rendering recovered after', errorCountRef.current, 'errors');\n                            errorCountRef.current = 0;\n                        }\n                    } catch (error) {\n                        errorCountRef.current = (errorCountRef.current || 0) + 1;\n                        if (errorCountRef.current === 1) {\n                            // Only log detailed info on first error\n                            console.error('First error in animation loop:', error);\n                            console.error('Scene children count:', sceneRef.current.children.length);\n                            console.error('Scene state:', sceneRef.current);\n                            console.error('Camera state:', cameraRef.current);\n                            console.error('Controls state:', controlsRef.current);\n                            // Log the model group state\n                            if (modelGroupRef.current) {\n                                console.error('Model group state:', modelGroupRef.current);\n                                console.error('Model visible:', modelGroupRef.current.visible);\n                                console.error('Model children count:', modelGroupRef.current.children.length);\n                            }\n                        }\n                        // Stop animation after too many errors\n                        if (errorCountRef.current > 100) {\n                            console.error('Too many render errors, stopping animation loop');\n                            isAnimatingRef.current = false;\n                        }\n                    }\n                }\n            }[\"LDRViewerComponent.useEffect.animate\"];\n            // Start the animation loop\n            animate();\n            console.log('Animation loop started');\n            return ({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    // Properly clean up animation loop\n                    isAnimatingRef.current = false;\n                    if (animationIdRef.current !== null) {\n                        cancelAnimationFrame(animationIdRef.current);\n                        animationIdRef.current = null;\n                    }\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n        }\n    }[\"LDRViewerComponent.useEffect\"], []);\n    // Test cube commented out - LEGO model should load instead\n    /*\r\n  const cubeRef = useRef<THREE.Mesh | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!sceneRef.current) return;\r\n\r\n    // Prevent adding cube multiple times\r\n    if (cubeRef.current) return;\r\n\r\n    // Add a simple red cube that we know works\r\n    const geometry = new THREE.BoxGeometry(30, 30, 30);\r\n    const material = new THREE.MeshPhongMaterial({\r\n      color: 0xff0000,\r\n      side: THREE.DoubleSide\r\n    });\r\n    const cube = new THREE.Mesh(geometry, material);\r\n    cube.position.set(0, 300, 0);\r\n\r\n    sceneRef.current.add(cube);\r\n\r\n    cubeRef.current = cube;\r\n    console.log('Simple test cube added at:', cube.position);\r\n    console.log('Scene now has', sceneRef.current.children.length, 'children');\r\n\r\n    return () => {\r\n      // Commented out cleanup to keep the cube visible\r\n      // if (sceneRef.current && cube) {\r\n      //   sceneRef.current.remove(cube);  // Also need to prevent removal from scene\r\n      //   geometry.dispose();\r\n      //   material.dispose();\r\n      // }\r\n      // cubeRef.current = null;\r\n    };\r\n  }, []);\r\n  */ // Cube animation commented out since cube is removed\n    /*\r\n  useEffect(() => {\r\n    const animate = () => {\r\n      if (cubeRef.current) {\r\n        cubeRef.current.rotation.x += 0.01;\r\n        cubeRef.current.rotation.y += 0.01;\r\n      }\r\n    };\r\n\r\n    const id = setInterval(animate, 16); // ~60fps\r\n\r\n    // Commented out interval cleanup\r\n    // return () => clearInterval(id);\r\n    return () => {};\r\n  }, []);\r\n  */ // LEGO LOADING CODE\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            // Need either modelPath or ldrawContent\n            if (!modelPath && !ldrawContent || !sceneRef.current || !rendererRef.current || !cameraRef.current) return;\n            // Skip if we're already loading this exact model\n            const currentIdentifier = ldrawContent ? \"content-\".concat(ldrawContent.substring(0, 100)) : modelPath;\n            if (currentModelPathRef.current === currentIdentifier && isLoadingRef.current) {\n                console.log('Same model already loading, skipping...');\n                return;\n            }\n            // Skip if this model is already loaded\n            if (currentModelPathRef.current === currentIdentifier && modelGroupRef.current) {\n                console.log('Model already loaded, skipping...');\n                return;\n            }\n            // Prevent concurrent loads\n            if (isLoadingRef.current) {\n                console.log('Another model is loading, skipping...');\n                return;\n            }\n            // Save camera state before removing model if preserveCamera is true\n            if (preserveCamera && cameraRef.current && controlsRef.current) {\n                savedCameraPosition.current = cameraRef.current.position.clone();\n                savedCameraTarget.current = controlsRef.current.target.clone();\n                console.log('Saved camera position:', savedCameraPosition.current);\n                console.log('Saved camera target:', savedCameraTarget.current);\n            }\n            // Clean up previous model safely\n            if (modelGroupRef.current && sceneRef.current) {\n                console.log('Removing previous model from scene');\n                // Mark as invisible first to prevent render issues\n                modelGroupRef.current.visible = false;\n                // Remove from scene on next tick\n                const modelToRemove = modelGroupRef.current;\n                modelGroupRef.current = null;\n                setTimeout({\n                    \"LDRViewerComponent.useEffect\": ()=>{\n                        if (sceneRef.current && modelToRemove) {\n                            console.log('Actually removing model and disposing resources');\n                            sceneRef.current.remove(modelToRemove);\n                            // Dispose of geometries and materials if needed\n                            modelToRemove.traverse({\n                                \"LDRViewerComponent.useEffect\": (child)=>{\n                                    if (child.geometry) child.geometry.dispose();\n                                    if (child.material) {\n                                        if (Array.isArray(child.material)) {\n                                            child.material.forEach({\n                                                \"LDRViewerComponent.useEffect\": (mat)=>mat.dispose()\n                                            }[\"LDRViewerComponent.useEffect\"]);\n                                        } else {\n                                            child.material.dispose();\n                                        }\n                                    }\n                                }\n                            }[\"LDRViewerComponent.useEffect\"]);\n                            console.log('Model removal complete');\n                        }\n                    }\n                }[\"LDRViewerComponent.useEffect\"], 0);\n            }\n            // Prevent multiple loads of the same model\n            let cancelled = false;\n            isLoadingRef.current = true;\n            currentModelPathRef.current = currentIdentifier || 'generated';\n            // Clear any previous error\n            setLoadError(null);\n            var _loadingManagerRef_current;\n            const loader = new three_examples_jsm_loaders_LDrawLoader_js__WEBPACK_IMPORTED_MODULE_4__.LDrawLoader((_loadingManagerRef_current = loadingManagerRef.current) !== null && _loadingManagerRef_current !== void 0 ? _loadingManagerRef_current : undefined);\n            // Set the parts library path to the ldraw directory\n            loader.setPartsLibraryPath('/ldraw/');\n            // Enable smooth normals for better rendering\n            loader.smoothNormals = true;\n            // Set the file map for better part resolution\n            loader.setFileMap({});\n            // Set the conditional line material class (not an instance)\n            loader.setConditionalLineMaterial(three_examples_jsm_materials_LDrawConditionalLineMaterial_js__WEBPACK_IMPORTED_MODULE_5__.LDrawConditionalLineMaterial);\n            console.log(ldrawContent ? 'Loading LDraw from content' : \"Loading LDR file: \".concat(modelPath));\n            // Try to preload materials first, but don't fail if it doesn't work\n            const materialsPromise = loader.preloadMaterials('/ldraw/LDConfig.ldr').then({\n                \"LDRViewerComponent.useEffect.materialsPromise\": ()=>{\n                    console.log('Materials preloaded successfully');\n                }\n            }[\"LDRViewerComponent.useEffect.materialsPromise\"]).catch({\n                \"LDRViewerComponent.useEffect.materialsPromise\": (err)=>{\n                    console.warn('Could not preload materials, using defaults:', err.message);\n                }\n            }[\"LDRViewerComponent.useEffect.materialsPromise\"]);\n            // Override console.warn to catch subobject loading errors\n            const originalWarn = console.warn;\n            let hasSubobjectError = false;\n            console.warn = ({\n                \"LDRViewerComponent.useEffect\": function() {\n                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                        args[_key] = arguments[_key];\n                    }\n                    const message = args.join(' ');\n                    if (message.includes('could not be loaded') || message.includes('Subobject')) {\n                        hasSubobjectError = true;\n                        // Don't log the warning to console\n                        return;\n                    }\n                    originalWarn.apply(console, args);\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n            // Load the model (wait for materials if possible, but don't block)\n            materialsPromise.finally({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    if (cancelled) return;\n                    // If we have direct content, parse it; otherwise load from file\n                    let modelPromise;\n                    if (ldrawContent) {\n                        // Use parse with callbacks and wrap in a promise\n                        modelPromise = new Promise({\n                            \"LDRViewerComponent.useEffect\": (resolve)=>{\n                                loader.parse(ldrawContent, {\n                                    \"LDRViewerComponent.useEffect\": (group)=>resolve(group)\n                                }[\"LDRViewerComponent.useEffect\"], {\n                                    \"LDRViewerComponent.useEffect\": (error)=>{\n                                        console.error('Error parsing LDraw content:', error);\n                                        resolve(null);\n                                    }\n                                }[\"LDRViewerComponent.useEffect\"]);\n                            }\n                        }[\"LDRViewerComponent.useEffect\"]);\n                    } else if (modelPath) {\n                        modelPromise = loader.loadAsync(modelPath).catch({\n                            \"LDRViewerComponent.useEffect\": (error)=>{\n                                console.error('Error loading model:', error);\n                                return null;\n                            }\n                        }[\"LDRViewerComponent.useEffect\"]);\n                    } else {\n                        modelPromise = Promise.resolve(null);\n                    }\n                    modelPromise.then({\n                        \"LDRViewerComponent.useEffect\": (group)=>{\n                            var _sceneRef_current;\n                            // Restore original console.warn\n                            console.warn = originalWarn;\n                            if (!group || cancelled) return;\n                            // Check if there were subobject errors\n                            if (hasSubobjectError) {\n                                console.log('Model has missing parts, displaying as error');\n                                throw new Error('Missing parts - model cannot be rendered properly');\n                            }\n                            console.log('Model loaded successfully:', group);\n                            isLoadingRef.current = false;\n                            // Safe traversal to handle null objects - remove them completely\n                            const safeTraverse = {\n                                \"LDRViewerComponent.useEffect.safeTraverse\": (obj)=>{\n                                    // Skip if null or undefined\n                                    if (!obj) return;\n                                    // Skip if not a valid object\n                                    if (typeof obj !== 'object') return;\n                                    // Skip if doesn't have visible property (not a Three.js object)\n                                    if (!('visible' in obj)) return;\n                                    // Process this object\n                                    if (obj.isMesh) {\n                                        const mesh = obj;\n                                        if (!mesh.material) {\n                                            // Create a default material if missing\n                                            mesh.material = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhongMaterial({\n                                                color: 0x808080,\n                                                side: three__WEBPACK_IMPORTED_MODULE_2__.DoubleSide\n                                            });\n                                            console.log('Added default material to mesh:', mesh.name);\n                                        } else if (Array.isArray(mesh.material)) {\n                                            // Check array of materials\n                                            mesh.material = mesh.material.map({\n                                                \"LDRViewerComponent.useEffect.safeTraverse\": (mat)=>{\n                                                    if (!mat) {\n                                                        console.log('Replacing null material in array');\n                                                        return new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhongMaterial({\n                                                            color: 0x808080,\n                                                            side: three__WEBPACK_IMPORTED_MODULE_2__.DoubleSide\n                                                        });\n                                                    }\n                                                    return mat;\n                                                }\n                                            }[\"LDRViewerComponent.useEffect.safeTraverse\"]);\n                                        }\n                                    }\n                                    // Remove null children completely\n                                    if (obj.children && Array.isArray(obj.children)) {\n                                        const validChildren = [];\n                                        for (const child of obj.children){\n                                            // Only keep valid children\n                                            if (child && typeof child === 'object' && 'visible' in child) {\n                                                validChildren.push(child);\n                                                safeTraverse(child);\n                                            } else if (child) {\n                                                console.warn('Removing invalid child from model:', child);\n                                            }\n                                        }\n                                        // Replace children array with only valid ones\n                                        obj.children = validChildren;\n                                    }\n                                }\n                            }[\"LDRViewerComponent.useEffect.safeTraverse\"];\n                            safeTraverse(group);\n                            // Skip step parsing for now - just add the model as-is\n                            /*\r\n        // Parse STEP commands from the LDraw content if available\r\n        let stepBoundaries: number[] = [];\r\n        if (content) {\r\n          const lines = content.split('\\n');\r\n          let partCount = 0;\r\n          lines.forEach(line => {\r\n            const trimmed = line.trim();\r\n            if (trimmed.startsWith('1 ')) {\r\n              // This is a part line\r\n              partCount++;\r\n            } else if (trimmed === '0 STEP' || trimmed.toLowerCase() === '0 step') {\r\n              // This is a STEP command\r\n              stepBoundaries.push(partCount);\r\n              console.log(`Found STEP command after part ${partCount}`);\r\n            }\r\n          });\r\n          if (stepBoundaries.length > 0) {\r\n            console.log(`Found ${stepBoundaries.length} STEP commands in model`);\r\n          }\r\n        }\r\n\r\n        // Organize model into steps based on STEP commands\r\n        const steps: THREE.Group[] = [];\r\n        const allParts: THREE.Object3D[] = [];\r\n\r\n        // Collect only direct child groups/objects (not nested meshes)\r\n        // Each direct child typically represents one part from the LDraw file\r\n        const collectTopLevelParts = (obj: any, depth: number = 0) => {\r\n          // For the root group, process its direct children\r\n          if (depth === 0) {\r\n            obj.children.forEach((child: any) => {\r\n              // Each direct child is typically a part\r\n              if (child.type === 'Group' || child.type === 'Object3D' || child.isMesh || child.isLine) {\r\n                allParts.push(child);\r\n              }\r\n            });\r\n          }\r\n        };\r\n\r\n        collectTopLevelParts(group);\r\n        console.log(`Found ${allParts.length} top-level parts in model`);\r\n\r\n        // If we have STEP commands, organize parts accordingly\r\n        if (stepBoundaries.length > 0 && allParts.length > 0) {\r\n          const totalSteps = stepBoundaries.length;\r\n          console.log(`Organizing ${allParts.length} parts into ${totalSteps} steps`);\r\n          console.log(`Step boundaries (cumulative part counts): ${stepBoundaries.join(', ')}`);\r\n\r\n          // Assign step numbers to each part\r\n          allParts.forEach((part, index) => {\r\n            // Find which step this part belongs to\r\n            let stepNumber = 1;\r\n            for (let i = 0; i < stepBoundaries.length; i++) {\r\n              if (index < stepBoundaries[i]) {\r\n                stepNumber = i + 1;\r\n                break;\r\n              }\r\n            }\r\n\r\n            // Assign step number to this part and all its children\r\n            part.userData.stepNumber = stepNumber;\r\n            part.traverse((child: any) => {\r\n              child.userData.stepNumber = stepNumber;\r\n            });\r\n          });\r\n\r\n          // Create step groups and add parts to them\r\n          for (let stepNum = 1; stepNum <= totalSteps; stepNum++) {\r\n            const stepGroup = new THREE.Group();\r\n            stepGroup.name = `Step ${stepNum}`;\r\n            let partsInStep = 0;\r\n\r\n            allParts.forEach(part => {\r\n              if (part.userData.stepNumber === stepNum) {\r\n                stepGroup.add(part);\r\n                partsInStep++;\r\n              }\r\n            });\r\n\r\n            if (partsInStep > 0) {\r\n              steps.push(stepGroup);\r\n              console.log(`Step ${stepNum}: ${partsInStep} parts`);\r\n            }\r\n          }\r\n\r\n        } else {\r\n          // No STEP commands found, treat all parts as one step\r\n          console.log('No STEP commands found, treating model as single step');\r\n          const singleStep = new THREE.Group();\r\n          singleStep.name = 'Step 1';\r\n          allParts.forEach(part => {\r\n            part.userData.stepNumber = 1;\r\n            part.traverse((child: any) => {\r\n              child.userData.stepNumber = 1;\r\n            });\r\n            singleStep.add(part);\r\n          });\r\n          if (singleStep.children.length > 0) {\r\n            steps.push(singleStep);\r\n          }\r\n        }\r\n\r\n        // Collect all mesh/line objects for visibility control\r\n        const allRenderables: THREE.Object3D[] = [];\r\n        group.traverse((child: any) => {\r\n          if (child.isMesh || child.isLine || child.isLineSegments) {\r\n            allRenderables.push(child);\r\n          }\r\n        });\r\n\r\n        console.log(`Model organized into ${steps.length} steps with ${allRenderables.length} renderable objects`);\r\n        stepsRef.current = steps;\r\n        allPartsRef.current = allRenderables;\r\n        setTotalSteps(steps.length);\r\n        setCurrentStep(steps.length); // Start with all steps visible\r\n        */ // Position model at origin\n                            group.position.set(0, 0, 0);\n                            group.rotation.x = Math.PI; // Rotation can cause issues, keeping it commented\n                            modelGroupRef.current = group;\n                            if (sceneRef.current) {\n                                sceneRef.current.add(group);\n                                console.log('Model added to scene');\n                                console.log('Group children:', group.children.length);\n                                console.log('Group visible:', group.visible);\n                                console.log('Group in scene:', sceneRef.current.children.includes(group));\n                                // Make sure the group is visible\n                                group.visible = true;\n                                group.traverse({\n                                    \"LDRViewerComponent.useEffect\": (child)=>{\n                                        child.visible = true;\n                                    }\n                                }[\"LDRViewerComponent.useEffect\"]);\n                                // Count visible meshes and check materials\n                                let meshCount = 0;\n                                let visibleCount = 0;\n                                group.traverse({\n                                    \"LDRViewerComponent.useEffect\": (child)=>{\n                                        if (child.isMesh) {\n                                            var _mesh_geometry_attributes_position;\n                                            meshCount++;\n                                            const mesh = child;\n                                            if (mesh.visible) visibleCount++;\n                                            if (!mesh.geometry.boundingBox) {\n                                                mesh.geometry.computeBoundingBox();\n                                            }\n                                            // Log mesh details\n                                            console.log('Mesh details:', {\n                                                name: mesh.name,\n                                                visible: mesh.visible,\n                                                material: mesh.material,\n                                                geometryVertices: ((_mesh_geometry_attributes_position = mesh.geometry.attributes.position) === null || _mesh_geometry_attributes_position === void 0 ? void 0 : _mesh_geometry_attributes_position.count) || 0,\n                                                position: mesh.position,\n                                                scale: mesh.scale\n                                            });\n                                            // Make sure mesh has a material\n                                            if (!mesh.material) {\n                                                console.warn('Mesh has no material, adding default');\n                                                mesh.material = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhongMaterial({\n                                                    color: 0xff0000,\n                                                    side: three__WEBPACK_IMPORTED_MODULE_2__.DoubleSide\n                                                });\n                                            }\n                                        }\n                                    }\n                                }[\"LDRViewerComponent.useEffect\"]);\n                                console.log(\"Found \".concat(meshCount, \" meshes, \").concat(visibleCount, \" visible\"));\n                            // Test cube removed - rendering verified to be working\n                            // const testGeometry = new THREE.BoxGeometry(50, 50, 50);\n                            // const testMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00 });\n                            // const testCube = new THREE.Mesh(testGeometry, testMaterial);\n                            // testCube.position.set(100, 25, 0);\n                            // sceneRef.current.add(testCube);\n                            // console.log('Test cube added at:', testCube.position);\n                            }\n                            // Force update matrices before calculating bounding box\n                            group.updateMatrixWorld(true);\n                            // Calculate bounding box and center camera\n                            const box = new three__WEBPACK_IMPORTED_MODULE_2__.Box3().setFromObject(group);\n                            const center = box.getCenter(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3());\n                            const size = box.getSize(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3());\n                            // Log model information\n                            if (!box.isEmpty() && size.x > 0 && size.y > 0 && size.z > 0) {\n                                console.log('Model center:', center.x, center.y, center.z);\n                                console.log('Model size:', size.x, size.y, size.z);\n                            } else {\n                                console.warn('Model has empty/invalid bounding box');\n                            }\n                            if (controlsRef.current && cameraRef.current) {\n                                // Restore camera position if preserveCamera is true and we have saved state\n                                if (preserveCamera && savedCameraPosition.current && savedCameraTarget.current) {\n                                    console.log('Restoring camera position');\n                                    cameraRef.current.position.copy(savedCameraPosition.current);\n                                    controlsRef.current.target.copy(savedCameraTarget.current);\n                                } else {\n                                    // Just update controls to look at origin for initial load\n                                    controlsRef.current.target.set(0, 0, 0);\n                                }\n                                controlsRef.current.update();\n                            }\n                            // The animation loop will handle rendering\n                            console.log('Scene children:', ((_sceneRef_current = sceneRef.current) === null || _sceneRef_current === void 0 ? void 0 : _sceneRef_current.children.length) || 0);\n                        }\n                    }[\"LDRViewerComponent.useEffect\"]).catch({\n                        \"LDRViewerComponent.useEffect\": (error)=>{\n                            // Restore original console.warn in case of error\n                            console.warn = originalWarn;\n                            if (cancelled) return;\n                            console.error('Error loading model:', error);\n                            console.error('Model path:', modelPath);\n                            console.error('Stack trace:', error.stack);\n                            isLoadingRef.current = false;\n                            // Set error message for display\n                            let errorMessage = 'Build failed to render';\n                            if (error.message) {\n                                // Check if it's a missing parts error\n                                if (error.message.includes('Missing parts')) {\n                                    errorMessage = 'Cannot be rendered\\nMissing LEGO parts';\n                                } else {\n                                    // Extract the specific part that failed if available\n                                    const partMatch = error.message.match(/\"([^\"]+\\.dat)\"/);\n                                    if (partMatch) {\n                                        errorMessage = \"Build failed to render\\nInvalid part: \".concat(partMatch[1]);\n                                    }\n                                }\n                            }\n                            setLoadError(errorMessage);\n                        }\n                    }[\"LDRViewerComponent.useEffect\"]);\n                }\n            }[\"LDRViewerComponent.useEffect\"]); // Close the .finally() block\n            // Cleanup function - only remove model if path changes or component unmounts\n            return ({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    cancelled = true;\n                    // Restore original console.warn if it's been overridden\n                    if (console.warn !== originalWarn) {\n                        console.warn = originalWarn;\n                    }\n                // Don't clear the model here - it will be cleared when a new model loads\n                // or when the component unmounts\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n        }\n    }[\"LDRViewerComponent.useEffect\"], [\n        modelPath,\n        ldrawContent\n    ]);\n    // Clean up model when component unmounts\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            return ({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    if (modelGroupRef.current && sceneRef.current) {\n                        // Mark as invisible first\n                        modelGroupRef.current.visible = false;\n                        // Then remove\n                        sceneRef.current.remove(modelGroupRef.current);\n                        modelGroupRef.current = null;\n                    }\n                    isLoadingRef.current = false;\n                    currentModelPathRef.current = '';\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n        }\n    }[\"LDRViewerComponent.useEffect\"], []);\n    // Update visibility based on current step\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            if (allPartsRef.current.length === 0) return;\n            console.log(\"Updating visibility for step \".concat(currentStep, \" of \").concat(totalSteps));\n            // Show/hide parts based on current step\n            allPartsRef.current.forEach({\n                \"LDRViewerComponent.useEffect\": (part)=>{\n                    const partStep = part.userData.stepNumber || 1;\n                    part.visible = partStep <= currentStep;\n                }\n            }[\"LDRViewerComponent.useEffect\"]);\n        }\n    }[\"LDRViewerComponent.useEffect\"], [\n        currentStep,\n        totalSteps\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            position: 'relative',\n            width: '100%'\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: containerRef,\n                style: {\n                    width: '100%',\n                    height: '600px',\n                    border: '1px solid #ccc',\n                    borderRadius: '8px',\n                    overflow: 'hidden',\n                    position: 'relative'\n                },\n                children: loadError && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    style: {\n                        position: 'absolute',\n                        top: '50%',\n                        left: '50%',\n                        transform: 'translate(-50%, -50%)',\n                        backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                        padding: '20px 30px',\n                        borderRadius: '8px',\n                        boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)',\n                        textAlign: 'center',\n                        zIndex: 100\n                    },\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                color: '#d32f2f',\n                                fontSize: '18px',\n                                fontWeight: '600',\n                                marginBottom: '8px'\n                            },\n                            children: [\n                                \"⚠️ \",\n                                loadError.split('\\n')[0]\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                            lineNumber: 947,\n                            columnNumber: 13\n                        }, undefined),\n                        loadError.includes('\\n') && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                color: '#666',\n                                fontSize: '14px',\n                                marginTop: '8px'\n                            },\n                            children: loadError.split('\\n')[1]\n                        }, void 0, false, {\n                            fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                            lineNumber: 958,\n                            columnNumber: 15\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                    lineNumber: 933,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                lineNumber: 921,\n                columnNumber: 7\n            }, undefined),\n            totalSteps > 1 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    position: 'absolute',\n                    bottom: '20px',\n                    left: '50%',\n                    transform: 'translateX(-50%)',\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                    padding: '15px 20px',\n                    borderRadius: '8px',\n                    boxShadow: '0 2px 10px rgba(0,0,0,0.2)',\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: '15px',\n                    minWidth: '400px',\n                    zIndex: 1000\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                        style: {\n                            fontWeight: 'bold',\n                            fontSize: '14px',\n                            color: '#333',\n                            minWidth: '80px'\n                        },\n                        children: [\n                            \"Step \",\n                            currentStep,\n                            \"/\",\n                            totalSteps\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                        lineNumber: 987,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                        type: \"range\",\n                        min: 1,\n                        max: totalSteps,\n                        value: currentStep,\n                        onChange: (e)=>setCurrentStep(parseInt(e.target.value)),\n                        style: {\n                            flex: 1,\n                            height: '6px',\n                            background: \"linear-gradient(to right, #4CAF50 0%, #4CAF50 \".concat((currentStep - 1) / (totalSteps - 1) * 100, \"%, #ddd \").concat((currentStep - 1) / (totalSteps - 1) * 100, \"%, #ddd 100%)\"),\n                            borderRadius: '3px',\n                            outline: 'none',\n                            cursor: 'pointer'\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                        lineNumber: 995,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            display: 'flex',\n                            gap: '8px'\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>setCurrentStep(Math.max(1, currentStep - 1)),\n                                disabled: currentStep <= 1,\n                                style: {\n                                    padding: '6px 12px',\n                                    backgroundColor: currentStep > 1 ? '#4CAF50' : '#ccc',\n                                    color: 'white',\n                                    border: 'none',\n                                    borderRadius: '4px',\n                                    cursor: currentStep > 1 ? 'pointer' : 'not-allowed',\n                                    fontSize: '12px',\n                                    fontWeight: 'bold'\n                                },\n                                children: \"← Prev\"\n                            }, void 0, false, {\n                                fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                                lineNumber: 1014,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>setCurrentStep(Math.min(totalSteps, currentStep + 1)),\n                                disabled: currentStep >= totalSteps,\n                                style: {\n                                    padding: '6px 12px',\n                                    backgroundColor: currentStep < totalSteps ? '#4CAF50' : '#ccc',\n                                    color: 'white',\n                                    border: 'none',\n                                    borderRadius: '4px',\n                                    cursor: currentStep < totalSteps ? 'pointer' : 'not-allowed',\n                                    fontSize: '12px',\n                                    fontWeight: 'bold'\n                                },\n                                children: \"Next →\"\n                            }, void 0, false, {\n                                fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                                lineNumber: 1030,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>setCurrentStep(currentStep === totalSteps ? 1 : totalSteps),\n                                style: {\n                                    padding: '6px 12px',\n                                    backgroundColor: '#2196F3',\n                                    color: 'white',\n                                    border: 'none',\n                                    borderRadius: '4px',\n                                    cursor: 'pointer',\n                                    fontSize: '12px',\n                                    fontWeight: 'bold'\n                                },\n                                children: currentStep === totalSteps ? 'Reset' : 'All'\n                            }, void 0, false, {\n                                fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                                lineNumber: 1046,\n                                columnNumber: 13\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                        lineNumber: 1010,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                lineNumber: 972,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n        lineNumber: 920,\n        columnNumber: 5\n    }, undefined);\n};\n_s(LDRViewerComponent, \"sdjX9Y5L7+TurB1ObkNBvCF6Y7s=\");\n_c = LDRViewerComponent;\nconst LDRViewer = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(LDRViewerComponent);\n_c1 = LDRViewer;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LDRViewer);\nvar _c, _c1;\n$RefreshReg$(_c, \"LDRViewerComponent\");\n$RefreshReg$(_c1, \"LDRViewer\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./components/LDRViewer.tsx\n"));

/***/ })

});