"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_pages-dir-browser_components_LDRViewer_tsx",{

/***/ "(pages-dir-browser)/./components/LDRViewer.tsx":
/*!**********************************!*\
  !*** ./components/LDRViewer.tsx ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(pages-dir-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls.js */ \"(pages-dir-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js\");\n/* harmony import */ var three_examples_jsm_loaders_LDrawLoader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three/examples/jsm/loaders/LDrawLoader.js */ \"(pages-dir-browser)/./node_modules/three/examples/jsm/loaders/LDrawLoader.js\");\n/* harmony import */ var three_examples_jsm_materials_LDrawConditionalLineMaterial_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three/examples/jsm/materials/LDrawConditionalLineMaterial.js */ \"(pages-dir-browser)/./node_modules/three/examples/jsm/materials/LDrawConditionalLineMaterial.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\nconst LDRViewerComponent = (param)=>{\n    let { modelPath } = param;\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const sceneRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const rendererRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const cameraRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const controlsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const modelGroupRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const loadingManagerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const isLoadingRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const currentModelPathRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)('');\n    const isInitializedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    // Create loading manager only once\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            if (loadingManagerRef.current) return;\n            const manager = new three__WEBPACK_IMPORTED_MODULE_2__.LoadingManager();\n            // Implement path resolution strategy similar to Three.js packLDrawModel\n            manager.setURLModifier({\n                \"LDRViewerComponent.useEffect\": (url)=>{\n                    // console.log('Original URL:', url);\n                    // Normalize path separators\n                    let normalized = url.replace(/\\\\/g, '/');\n                    // Handle s\\ prefix for subparts (convert s\\file.dat to s/file.dat)\n                    if (normalized.includes('s/') || normalized.match(/s[\\\\\\/]/)) {\n                        const parts = normalized.split(/[\\\\\\/]/);\n                        const lastTwo = parts.slice(-2);\n                        if (lastTwo[0] === 's') {\n                            // This is a subpart reference\n                            normalized = \"/ldraw/parts/s/\".concat(lastTwo[1]);\n                            // console.log('Subpart detected, normalized to:', normalized);\n                            return normalized;\n                        }\n                    }\n                    // Extract the filename and check for subdirectory (like s/)\n                    const urlParts = normalized.split('/');\n                    const filename = urlParts[urlParts.length - 1].toLowerCase();\n                    const hasSubdir = urlParts.length >= 2 && urlParts[urlParts.length - 2] === 's';\n                    // Define possible path prefixes to try\n                    const pathPrefixes = [\n                        '/output/',\n                        '/ldraw/',\n                        '/ldraw/p/',\n                        '/ldraw/parts/'\n                    ];\n                    // If the URL already has a valid prefix, clean it up\n                    for (const prefix of pathPrefixes){\n                        if (normalized.includes(prefix)) {\n                            // Clean up any duplicate path segments\n                            normalized = normalized.replace(/\\/ldraw\\/parts\\/parts\\//g, '/ldraw/parts/');\n                            normalized = normalized.replace(/\\/ldraw\\/p\\/p\\//g, '/ldraw/p/');\n                            normalized = normalized.replace(/\\/output\\/output\\//g, '/output/');\n                            // Remove any redundant path combinations but preserve s/ subdirectory\n                            if (!normalized.includes('/s/')) {\n                                normalized = normalized.replace(/\\/ldraw\\/parts\\/p\\//g, '/ldraw/p/');\n                                normalized = normalized.replace(/\\/output\\/p\\//g, '/ldraw/p/');\n                                normalized = normalized.replace(/\\/ldraw\\/p\\/parts\\//g, '/ldraw/parts/');\n                                normalized = normalized.replace(/\\/output\\/parts\\//g, '/ldraw/parts/');\n                            } else {\n                                // Handle subparts in s/ directory\n                                normalized = normalized.replace(/\\/ldraw\\/parts\\/parts\\/s\\//g, '/ldraw/parts/s/');\n                                normalized = normalized.replace(/\\/ldraw\\/p\\/parts\\/s\\//g, '/ldraw/parts/s/');\n                                normalized = normalized.replace(/\\/output\\/parts\\/s\\//g, '/ldraw/parts/s/');\n                            }\n                            // console.log('Normalized URL:', normalized);\n                            return normalized;\n                        }\n                    }\n                    // If no valid prefix found, try to construct the path\n                    // This handles cases where the URL is just a filename or relative path\n                    if (!normalized.startsWith('/ldraw/')) {\n                        // Handle subparts (files in s/ directory)\n                        if (hasSubdir) {\n                            normalized = \"/ldraw/parts/s/\".concat(filename);\n                        } else if (filename.match(/^\\d/) || filename.startsWith('stud') || filename.startsWith('edge')) {\n                            normalized = \"/ldraw/p/\".concat(filename);\n                        } else if (filename.endsWith('.dat')) {\n                            normalized = \"/ldraw/parts/\".concat(filename);\n                        } else if (filename.endsWith('.ldr') || filename.endsWith('.mpd')) {\n                            normalized = \"/output/\".concat(filename);\n                        }\n                    // console.log('Constructed URL:', normalized);\n                    }\n                    return normalized;\n                }\n            }[\"LDRViewerComponent.useEffect\"]);\n            loadingManagerRef.current = manager;\n            return ({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    manager.setURLModifier(undefined);\n                    loadingManagerRef.current = null;\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n        }\n    }[\"LDRViewerComponent.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            if (!containerRef.current || isInitializedRef.current) return;\n            isInitializedRef.current = true;\n            const container = containerRef.current;\n            const width = container.clientWidth;\n            const height = container.clientHeight;\n            const scene = new three__WEBPACK_IMPORTED_MODULE_2__.Scene();\n            scene.background = new three__WEBPACK_IMPORTED_MODULE_2__.Color(0xeeeeee);\n            sceneRef.current = scene;\n            const camera = new three__WEBPACK_IMPORTED_MODULE_2__.PerspectiveCamera(45, width / height, 1, 5000);\n            camera.position.set(300, 400, 700);\n            cameraRef.current = camera;\n            const renderer = new three__WEBPACK_IMPORTED_MODULE_2__.WebGLRenderer({\n                antialias: true\n            });\n            renderer.setSize(width, height);\n            renderer.setPixelRatio(window.devicePixelRatio);\n            container.appendChild(renderer.domElement);\n            rendererRef.current = renderer;\n            const controls = new three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_3__.OrbitControls(camera, renderer.domElement);\n            controls.enableDamping = true;\n            controls.dampingFactor = 0.05;\n            controls.enablePan = true;\n            controls.enableRotate = true;\n            controls.enableZoom = true;\n            controls.screenSpacePanning = false;\n            controls.minDistance = 10;\n            controls.maxDistance = 2000;\n            controls.target.set(0, 0, 0);\n            controlsRef.current = controls;\n            // Enhanced lighting for better visibility\n            scene.add(new three__WEBPACK_IMPORTED_MODULE_2__.AmbientLight(0xffffff, 0.9)); // Brighter ambient light\n            // Main directional light\n            const dirLight = new three__WEBPACK_IMPORTED_MODULE_2__.DirectionalLight(0xffffff, 1.0);\n            dirLight.position.set(500, 1000, 500);\n            dirLight.castShadow = false;\n            scene.add(dirLight);\n            // Additional fill lights from different angles\n            const fillLight1 = new three__WEBPACK_IMPORTED_MODULE_2__.DirectionalLight(0xffffff, 0.5);\n            fillLight1.position.set(-500, 500, -500);\n            scene.add(fillLight1);\n            const fillLight2 = new three__WEBPACK_IMPORTED_MODULE_2__.DirectionalLight(0xffffff, 0.5);\n            fillLight2.position.set(500, 500, -500);\n            scene.add(fillLight2);\n            // Add a hemisphere light for more natural lighting\n            const hemiLight = new three__WEBPACK_IMPORTED_MODULE_2__.HemisphereLight(0xffffff, 0xcccccc, 0.4);\n            hemiLight.position.set(0, 500, 0);\n            scene.add(hemiLight);\n            // Grid helper removed\n            // const gridHelper = new THREE.GridHelper(1000, 20);\n            // scene.add(gridHelper);\n            // Add axes helper\n            const axesHelper = new three__WEBPACK_IMPORTED_MODULE_2__.AxesHelper(500);\n            scene.add(axesHelper);\n            const handleResize = {\n                \"LDRViewerComponent.useEffect.handleResize\": ()=>{\n                    if (!containerRef.current || !cameraRef.current || !rendererRef.current) return;\n                    const w = containerRef.current.clientWidth;\n                    const h = containerRef.current.clientHeight;\n                    rendererRef.current.setSize(w, h);\n                    cameraRef.current.aspect = w / h;\n                    cameraRef.current.updateProjectionMatrix();\n                }\n            }[\"LDRViewerComponent.useEffect.handleResize\"];\n            window.addEventListener('resize', handleResize);\n            // Animation loop is now handled in the cube effect\n            console.log('Scene initialized');\n            return ({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    window.removeEventListener('resize', handleResize);\n                // Keep renderer intact but clean up event listener\n                // if (rendererRef.current && containerRef.current) {\n                //   containerRef.current.removeChild(rendererRef.current.domElement);\n                //   rendererRef.current.dispose();\n                // }\n                // isInitializedRef.current = false;\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n        }\n    }[\"LDRViewerComponent.useEffect\"], []);\n    // Animation loop - using useRef to ensure single instance\n    const animationIdRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const isAnimatingRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            if (!sceneRef.current || !rendererRef.current || !cameraRef.current || !controlsRef.current) return;\n            // Prevent multiple animation loops\n            if (isAnimatingRef.current) {\n                console.log('Animation already running, skipping...');\n                return;\n            }\n            // Commented out cancellation\n            // if (animationIdRef.current !== null) {\n            //   cancelAnimationFrame(animationIdRef.current);\n            // }\n            isAnimatingRef.current = true;\n            const animate = {\n                \"LDRViewerComponent.useEffect.animate\": ()=>{\n                    if (!isAnimatingRef.current) return;\n                    // Check all refs before scheduling next frame\n                    if (!controlsRef.current || !rendererRef.current || !sceneRef.current || !cameraRef.current) {\n                        console.warn('Animation loop stopped: missing refs');\n                        isAnimatingRef.current = false;\n                        return;\n                    }\n                    animationIdRef.current = requestAnimationFrame(animate);\n                    try {\n                        // Update controls and render\n                        controlsRef.current.update();\n                        rendererRef.current.render(sceneRef.current, cameraRef.current);\n                    } catch (error) {\n                        console.error('Error in animation loop:', error);\n                        isAnimatingRef.current = false;\n                    }\n                }\n            }[\"LDRViewerComponent.useEffect.animate\"];\n            // Start the animation loop\n            animate();\n            console.log('Animation loop started');\n            return ({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    // Properly clean up animation loop\n                    isAnimatingRef.current = false;\n                    if (animationIdRef.current !== null) {\n                        cancelAnimationFrame(animationIdRef.current);\n                        animationIdRef.current = null;\n                    }\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n        }\n    }[\"LDRViewerComponent.useEffect\"], []);\n    // Test cube commented out - LEGO model should load instead\n    /*\r\n  const cubeRef = useRef<THREE.Mesh | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!sceneRef.current) return;\r\n\r\n    // Prevent adding cube multiple times\r\n    if (cubeRef.current) return;\r\n\r\n    // Add a simple red cube that we know works\r\n    const geometry = new THREE.BoxGeometry(30, 30, 30);\r\n    const material = new THREE.MeshPhongMaterial({\r\n      color: 0xff0000,\r\n      side: THREE.DoubleSide\r\n    });\r\n    const cube = new THREE.Mesh(geometry, material);\r\n    cube.position.set(0, 300, 0);\r\n\r\n    sceneRef.current.add(cube);\r\n\r\n    cubeRef.current = cube;\r\n    console.log('Simple test cube added at:', cube.position);\r\n    console.log('Scene now has', sceneRef.current.children.length, 'children');\r\n\r\n    return () => {\r\n      // Commented out cleanup to keep the cube visible\r\n      // if (sceneRef.current && cube) {\r\n      //   sceneRef.current.remove(cube);  // Also need to prevent removal from scene\r\n      //   geometry.dispose();\r\n      //   material.dispose();\r\n      // }\r\n      // cubeRef.current = null;\r\n    };\r\n  }, []);\r\n  */ // Cube animation commented out since cube is removed\n    /*\r\n  useEffect(() => {\r\n    const animate = () => {\r\n      if (cubeRef.current) {\r\n        cubeRef.current.rotation.x += 0.01;\r\n        cubeRef.current.rotation.y += 0.01;\r\n      }\r\n    };\r\n\r\n    const id = setInterval(animate, 16); // ~60fps\r\n\r\n    // Commented out interval cleanup\r\n    // return () => clearInterval(id);\r\n    return () => {};\r\n  }, []);\r\n  */ // LEGO LOADING CODE\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            if (!modelPath || !sceneRef.current || !rendererRef.current || !cameraRef.current) return;\n            // Skip if we're already loading this exact model\n            if (currentModelPathRef.current === modelPath && isLoadingRef.current) {\n                console.log('Same model already loading, skipping...');\n                return;\n            }\n            // Skip if this model is already loaded\n            if (currentModelPathRef.current === modelPath && modelGroupRef.current) {\n                console.log('Model already loaded, skipping...');\n                return;\n            }\n            // Prevent concurrent loads\n            if (isLoadingRef.current) {\n                console.log('Another model is loading, skipping...');\n                return;\n            }\n            // Clean up previous model\n            if (modelGroupRef.current) {\n                sceneRef.current.remove(modelGroupRef.current);\n                modelGroupRef.current = null;\n            }\n            // Prevent multiple loads of the same model\n            let cancelled = false;\n            isLoadingRef.current = true;\n            currentModelPathRef.current = modelPath;\n            var _loadingManagerRef_current;\n            const loader = new three_examples_jsm_loaders_LDrawLoader_js__WEBPACK_IMPORTED_MODULE_4__.LDrawLoader((_loadingManagerRef_current = loadingManagerRef.current) !== null && _loadingManagerRef_current !== void 0 ? _loadingManagerRef_current : undefined);\n            // Set the parts library path to the ldraw directory\n            loader.setPartsLibraryPath('/ldraw/');\n            // Set the file map for better part resolution\n            loader.setFileMap({});\n            // Set the conditional line material class (not an instance)\n            loader.setConditionalLineMaterial(three_examples_jsm_materials_LDrawConditionalLineMaterial_js__WEBPACK_IMPORTED_MODULE_5__.LDrawConditionalLineMaterial);\n            console.log('Loading LDR file:', modelPath);\n            // Try to preload materials first, but don't fail if it doesn't work\n            const materialsPromise = loader.preloadMaterials('/ldraw/LDConfig.ldr').then({\n                \"LDRViewerComponent.useEffect.materialsPromise\": ()=>{\n                    console.log('Materials preloaded successfully');\n                }\n            }[\"LDRViewerComponent.useEffect.materialsPromise\"]).catch({\n                \"LDRViewerComponent.useEffect.materialsPromise\": (err)=>{\n                    console.warn('Could not preload materials, using defaults:', err.message);\n                }\n            }[\"LDRViewerComponent.useEffect.materialsPromise\"]);\n            // Load the model (wait for materials if possible, but don't block)\n            Promise.all([\n                materialsPromise\n            ]).then({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    if (cancelled) return;\n                    return loader.loadAsync(modelPath);\n                }\n            }[\"LDRViewerComponent.useEffect\"]).then({\n                \"LDRViewerComponent.useEffect\": (group)=>{\n                    var _sceneRef_current;\n                    if (!group || cancelled) return;\n                    console.log('Model loaded successfully:', group);\n                    isLoadingRef.current = false;\n                    // Fix null materials issue\n                    group.traverse({\n                        \"LDRViewerComponent.useEffect\": (child)=>{\n                            if (child.isMesh) {\n                                const mesh = child;\n                                if (!mesh.material) {\n                                    // Create a default material if missing\n                                    mesh.material = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhongMaterial({\n                                        color: 0x808080,\n                                        side: three__WEBPACK_IMPORTED_MODULE_2__.DoubleSide\n                                    });\n                                    console.log('Added default material to mesh:', mesh.name);\n                                } else if (Array.isArray(mesh.material)) {\n                                    // Check array of materials\n                                    mesh.material = mesh.material.map({\n                                        \"LDRViewerComponent.useEffect\": (mat)=>{\n                                            if (!mat) {\n                                                console.log('Replacing null material in array');\n                                                return new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhongMaterial({\n                                                    color: 0x808080,\n                                                    side: three__WEBPACK_IMPORTED_MODULE_2__.DoubleSide\n                                                });\n                                            }\n                                            return mat;\n                                        }\n                                    }[\"LDRViewerComponent.useEffect\"]);\n                                }\n                            }\n                        }\n                    }[\"LDRViewerComponent.useEffect\"]);\n                    // Position model at origin and rotate 180 degrees\n                    group.position.set(0, 0, 0);\n                    // group.rotation.x = Math.PI; // Rotate 180 degrees around X axis\n                    modelGroupRef.current = group;\n                    if (sceneRef.current) {\n                        sceneRef.current.add(group);\n                        console.log('Model added to scene');\n                        console.log('Group children:', group.children.length);\n                        console.log('Group visible:', group.visible);\n                        console.log('Group in scene:', sceneRef.current.children.includes(group));\n                        // Make sure the group is visible\n                        group.visible = true;\n                        group.traverse({\n                            \"LDRViewerComponent.useEffect\": (child)=>{\n                                child.visible = true;\n                            }\n                        }[\"LDRViewerComponent.useEffect\"]);\n                        // Count visible meshes and check materials\n                        let meshCount = 0;\n                        let visibleCount = 0;\n                        group.traverse({\n                            \"LDRViewerComponent.useEffect\": (child)=>{\n                                if (child.isMesh) {\n                                    var _mesh_geometry_attributes_position;\n                                    meshCount++;\n                                    const mesh = child;\n                                    if (mesh.visible) visibleCount++;\n                                    if (!mesh.geometry.boundingBox) {\n                                        mesh.geometry.computeBoundingBox();\n                                    }\n                                    // Log mesh details\n                                    console.log('Mesh details:', {\n                                        name: mesh.name,\n                                        visible: mesh.visible,\n                                        material: mesh.material,\n                                        geometryVertices: ((_mesh_geometry_attributes_position = mesh.geometry.attributes.position) === null || _mesh_geometry_attributes_position === void 0 ? void 0 : _mesh_geometry_attributes_position.count) || 0,\n                                        position: mesh.position,\n                                        scale: mesh.scale\n                                    });\n                                    // Make sure mesh has a material\n                                    if (!mesh.material) {\n                                        console.warn('Mesh has no material, adding default');\n                                        mesh.material = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhongMaterial({\n                                            color: 0xff0000,\n                                            side: three__WEBPACK_IMPORTED_MODULE_2__.DoubleSide\n                                        });\n                                    }\n                                }\n                            }\n                        }[\"LDRViewerComponent.useEffect\"]);\n                        console.log(\"Found \".concat(meshCount, \" meshes, \").concat(visibleCount, \" visible\"));\n                    // Test cube removed - rendering verified to be working\n                    // const testGeometry = new THREE.BoxGeometry(50, 50, 50);\n                    // const testMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00 });\n                    // const testCube = new THREE.Mesh(testGeometry, testMaterial);\n                    // testCube.position.set(100, 25, 0);\n                    // sceneRef.current.add(testCube);\n                    // console.log('Test cube added at:', testCube.position);\n                    }\n                    // Force update matrices before calculating bounding box\n                    group.updateMatrixWorld(true);\n                    // Calculate bounding box and center camera\n                    const box = new three__WEBPACK_IMPORTED_MODULE_2__.Box3().setFromObject(group);\n                    const center = box.getCenter(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3());\n                    const size = box.getSize(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3());\n                    // Log model information\n                    if (!box.isEmpty() && size.x > 0 && size.y > 0 && size.z > 0) {\n                        console.log('Model center:', center.x, center.y, center.z);\n                        console.log('Model size:', size.x, size.y, size.z);\n                    } else {\n                        console.warn('Model has empty/invalid bounding box');\n                    }\n                    if (controlsRef.current) {\n                        // Just update controls to look at origin\n                        controlsRef.current.target.set(0, 0, 0);\n                        controlsRef.current.update();\n                    }\n                    // The animation loop will handle rendering\n                    console.log('Scene children:', ((_sceneRef_current = sceneRef.current) === null || _sceneRef_current === void 0 ? void 0 : _sceneRef_current.children.length) || 0);\n                }\n            }[\"LDRViewerComponent.useEffect\"]).catch({\n                \"LDRViewerComponent.useEffect\": (error)=>{\n                    if (cancelled) return;\n                    console.error('Error loading model:', error);\n                    console.error('Model path:', modelPath);\n                    console.error('Stack trace:', error.stack);\n                    isLoadingRef.current = false;\n                }\n            }[\"LDRViewerComponent.useEffect\"]);\n            // Cleanup function - only remove model if path changes or component unmounts\n            return ({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    cancelled = true;\n                // Don't clear the model here - it will be cleared when a new model loads\n                // or when the component unmounts\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n        }\n    }[\"LDRViewerComponent.useEffect\"], [\n        modelPath\n    ]);\n    // Clean up model when component unmounts\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            return ({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    if (modelGroupRef.current && sceneRef.current) {\n                        sceneRef.current.remove(modelGroupRef.current);\n                        modelGroupRef.current = null;\n                    }\n                    isLoadingRef.current = false;\n                    currentModelPathRef.current = '';\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n        }\n    }[\"LDRViewerComponent.useEffect\"], []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        style: {\n            width: '100%',\n            height: '600px',\n            border: '1px solid #ccc',\n            borderRadius: '8px',\n            overflow: 'hidden'\n        }\n    }, void 0, false, {\n        fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n        lineNumber: 531,\n        columnNumber: 5\n    }, undefined);\n};\n_s(LDRViewerComponent, \"+8xfK9KiqPsvqBciND15CUaeZjw=\");\n_c = LDRViewerComponent;\nconst LDRViewer = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(LDRViewerComponent);\n_c1 = LDRViewer;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LDRViewer);\nvar _c, _c1;\n$RefreshReg$(_c, \"LDRViewerComponent\");\n$RefreshReg$(_c1, \"LDRViewer\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./components/LDRViewer.tsx\n"));

/***/ })

});