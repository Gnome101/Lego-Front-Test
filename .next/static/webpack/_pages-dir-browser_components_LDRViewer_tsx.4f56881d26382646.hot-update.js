"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_pages-dir-browser_components_LDRViewer_tsx",{

/***/ "(pages-dir-browser)/./components/LDRViewer.tsx":
/*!**********************************!*\
  !*** ./components/LDRViewer.tsx ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(pages-dir-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls.js */ \"(pages-dir-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js\");\n/* harmony import */ var three_examples_jsm_loaders_LDrawLoader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three/examples/jsm/loaders/LDrawLoader.js */ \"(pages-dir-browser)/./node_modules/three/examples/jsm/loaders/LDrawLoader.js\");\n/* harmony import */ var three_examples_jsm_materials_LDrawConditionalLineMaterial_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three/examples/jsm/materials/LDrawConditionalLineMaterial.js */ \"(pages-dir-browser)/./node_modules/three/examples/jsm/materials/LDrawConditionalLineMaterial.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\nconst LDRViewerComponent = (param)=>{\n    let { modelPath, ldrawContent, preserveCamera } = param;\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const sceneRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const rendererRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const cameraRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const controlsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const modelGroupRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const loadingManagerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const isLoadingRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const currentModelPathRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)('');\n    const isInitializedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const errorCountRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    // Error state for displaying messages\n    const [loadError, setLoadError] = react__WEBPACK_IMPORTED_MODULE_1___default().useState(null);\n    // Camera state preservation\n    const savedCameraPosition = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const savedCameraTarget = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Step control\n    const [currentStep, setCurrentStep] = react__WEBPACK_IMPORTED_MODULE_1___default().useState(1);\n    const [totalSteps, setTotalSteps] = react__WEBPACK_IMPORTED_MODULE_1___default().useState(1);\n    const stepsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const allPartsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    // Create loading manager only once\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            if (loadingManagerRef.current) return;\n            const manager = new three__WEBPACK_IMPORTED_MODULE_2__.LoadingManager();\n            // Implement path resolution strategy similar to Three.js packLDrawModel\n            manager.setURLModifier({\n                \"LDRViewerComponent.useEffect\": (url)=>{\n                    // console.log('Original URL:', url);\n                    // Normalize path separators\n                    let normalized = url.replace(/\\\\/g, '/');\n                    // Handle s\\ prefix for subparts (convert s\\file.dat to s/file.dat)\n                    if (normalized.includes('s/') || normalized.match(/s[\\\\\\/]/)) {\n                        const parts = normalized.split(/[\\\\\\/]/);\n                        const lastTwo = parts.slice(-2);\n                        if (lastTwo[0] === 's') {\n                            // This is a subpart reference\n                            normalized = \"/ldraw/parts/s/\".concat(lastTwo[1]);\n                            // console.log('Subpart detected, normalized to:', normalized);\n                            return normalized;\n                        }\n                    }\n                    // Extract the filename and check for subdirectory (like s/)\n                    const urlParts = normalized.split('/');\n                    const filename = urlParts[urlParts.length - 1].toLowerCase();\n                    const hasSubdir = urlParts.length >= 2 && urlParts[urlParts.length - 2] === 's';\n                    // Define possible path prefixes to try\n                    const pathPrefixes = [\n                        '/output/',\n                        '/ldraw/',\n                        '/ldraw/p/',\n                        '/ldraw/parts/'\n                    ];\n                    // If the URL already has a valid prefix, clean it up\n                    for (const prefix of pathPrefixes){\n                        if (normalized.includes(prefix)) {\n                            // Clean up any duplicate path segments\n                            normalized = normalized.replace(/\\/ldraw\\/parts\\/parts\\//g, '/ldraw/parts/');\n                            normalized = normalized.replace(/\\/ldraw\\/p\\/p\\//g, '/ldraw/p/');\n                            normalized = normalized.replace(/\\/output\\/output\\//g, '/output/');\n                            // Remove any redundant path combinations but preserve s/ subdirectory\n                            if (!normalized.includes('/s/')) {\n                                normalized = normalized.replace(/\\/ldraw\\/parts\\/p\\//g, '/ldraw/p/');\n                                normalized = normalized.replace(/\\/output\\/p\\//g, '/ldraw/p/');\n                                normalized = normalized.replace(/\\/ldraw\\/p\\/parts\\//g, '/ldraw/parts/');\n                                normalized = normalized.replace(/\\/output\\/parts\\//g, '/ldraw/parts/');\n                            } else {\n                                // Handle subparts in s/ directory\n                                normalized = normalized.replace(/\\/ldraw\\/parts\\/parts\\/s\\//g, '/ldraw/parts/s/');\n                                normalized = normalized.replace(/\\/ldraw\\/p\\/parts\\/s\\//g, '/ldraw/parts/s/');\n                                normalized = normalized.replace(/\\/output\\/parts\\/s\\//g, '/ldraw/parts/s/');\n                            }\n                            // console.log('Normalized URL:', normalized);\n                            return normalized;\n                        }\n                    }\n                    // If no valid prefix found, try to construct the path\n                    // This handles cases where the URL is just a filename or relative path\n                    if (!normalized.startsWith('/ldraw/')) {\n                        // Handle subparts (files in s/ directory)\n                        if (hasSubdir) {\n                            normalized = \"/ldraw/parts/s/\".concat(filename);\n                        } else if (filename.match(/^\\d/) || filename.startsWith('stud') || filename.startsWith('edge')) {\n                            normalized = \"/ldraw/p/\".concat(filename);\n                        } else if (filename.endsWith('.dat')) {\n                            normalized = \"/ldraw/parts/\".concat(filename);\n                        } else if (filename.endsWith('.ldr') || filename.endsWith('.mpd')) {\n                            normalized = \"/output/\".concat(filename);\n                        }\n                    // console.log('Constructed URL:', normalized);\n                    }\n                    return normalized;\n                }\n            }[\"LDRViewerComponent.useEffect\"]);\n            loadingManagerRef.current = manager;\n            return ({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    manager.setURLModifier(undefined);\n                    loadingManagerRef.current = null;\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n        }\n    }[\"LDRViewerComponent.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            if (!containerRef.current || isInitializedRef.current) return;\n            isInitializedRef.current = true;\n            const container = containerRef.current;\n            const width = container.clientWidth;\n            const height = container.clientHeight;\n            const scene = new three__WEBPACK_IMPORTED_MODULE_2__.Scene();\n            scene.background = new three__WEBPACK_IMPORTED_MODULE_2__.Color(0xeeeeee);\n            sceneRef.current = scene;\n            // Camera with settings optimized for large LEGO models\n            const camera = new three__WEBPACK_IMPORTED_MODULE_2__.PerspectiveCamera(45, width / height, 0.1, 100000);\n            camera.position.set(300, 400, 700);\n            cameraRef.current = camera;\n            const renderer = new three__WEBPACK_IMPORTED_MODULE_2__.WebGLRenderer({\n                antialias: true\n            });\n            renderer.setSize(width, height);\n            renderer.setPixelRatio(window.devicePixelRatio);\n            container.appendChild(renderer.domElement);\n            rendererRef.current = renderer;\n            const controls = new three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_3__.OrbitControls(camera, renderer.domElement);\n            controls.enableDamping = true;\n            controls.dampingFactor = 0.05;\n            controls.enablePan = true;\n            controls.enableRotate = true;\n            controls.enableZoom = true;\n            controls.screenSpacePanning = false;\n            controls.minDistance = 10;\n            controls.maxDistance = 50000; // Greatly increased max zoom out distance\n            controls.target.set(0, 0, 0);\n            controlsRef.current = controls;\n            // Enhanced lighting for better visibility\n            scene.add(new three__WEBPACK_IMPORTED_MODULE_2__.AmbientLight(0xffffff, 0.9)); // Brighter ambient light\n            // Main directional light\n            const dirLight = new three__WEBPACK_IMPORTED_MODULE_2__.DirectionalLight(0xffffff, 1.0);\n            dirLight.position.set(500, 1000, 500);\n            dirLight.castShadow = false;\n            scene.add(dirLight);\n            // Additional fill lights from different angles\n            const fillLight1 = new three__WEBPACK_IMPORTED_MODULE_2__.DirectionalLight(0xffffff, 0.5);\n            fillLight1.position.set(-500, 500, -500);\n            scene.add(fillLight1);\n            const fillLight2 = new three__WEBPACK_IMPORTED_MODULE_2__.DirectionalLight(0xffffff, 0.5);\n            fillLight2.position.set(500, 500, -500);\n            scene.add(fillLight2);\n            // Add a hemisphere light for more natural lighting\n            const hemiLight = new three__WEBPACK_IMPORTED_MODULE_2__.HemisphereLight(0xffffff, 0xcccccc, 0.4);\n            hemiLight.position.set(0, 500, 0);\n            scene.add(hemiLight);\n            // Grid helper removed\n            // const gridHelper = new THREE.GridHelper(1000, 20);\n            // scene.add(gridHelper);\n            // Add axes helper\n            const axesHelper = new three__WEBPACK_IMPORTED_MODULE_2__.AxesHelper(500);\n            scene.add(axesHelper);\n            const handleResize = {\n                \"LDRViewerComponent.useEffect.handleResize\": ()=>{\n                    if (!containerRef.current || !cameraRef.current || !rendererRef.current) return;\n                    const w = containerRef.current.clientWidth;\n                    const h = containerRef.current.clientHeight;\n                    rendererRef.current.setSize(w, h);\n                    cameraRef.current.aspect = w / h;\n                    cameraRef.current.updateProjectionMatrix();\n                }\n            }[\"LDRViewerComponent.useEffect.handleResize\"];\n            window.addEventListener('resize', handleResize);\n            // Animation loop is now handled in the cube effect\n            console.log('Scene initialized');\n            return ({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    window.removeEventListener('resize', handleResize);\n                // Keep renderer intact but clean up event listener\n                // if (rendererRef.current && containerRef.current) {\n                //   containerRef.current.removeChild(rendererRef.current.domElement);\n                //   rendererRef.current.dispose();\n                // }\n                // isInitializedRef.current = false;\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n        }\n    }[\"LDRViewerComponent.useEffect\"], []);\n    // Animation loop - using useRef to ensure single instance\n    const animationIdRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const isAnimatingRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            if (!sceneRef.current || !rendererRef.current || !cameraRef.current || !controlsRef.current) return;\n            // Prevent multiple animation loops\n            if (isAnimatingRef.current) {\n                console.log('Animation already running, skipping...');\n                return;\n            }\n            // Commented out cancellation\n            // if (animationIdRef.current !== null) {\n            //   cancelAnimationFrame(animationIdRef.current);\n            // }\n            isAnimatingRef.current = true;\n            const animate = {\n                \"LDRViewerComponent.useEffect.animate\": ()=>{\n                    if (!isAnimatingRef.current) return;\n                    // Check all refs before scheduling next frame\n                    if (!controlsRef.current || !rendererRef.current || !sceneRef.current || !cameraRef.current) {\n                        console.warn('Animation loop stopped: missing refs');\n                        isAnimatingRef.current = false;\n                        return;\n                    }\n                    animationIdRef.current = requestAnimationFrame(animate);\n                    try {\n                        // Only validate scene if we've had recent errors\n                        if (errorCountRef.current > 0 && errorCountRef.current < 5) {\n                            let hasNullChildren = false;\n                            let nullCheckCount = 0;\n                            sceneRef.current.traverse({\n                                \"LDRViewerComponent.useEffect.animate\": (child)=>{\n                                    nullCheckCount++;\n                                    // Check if the object itself has required properties\n                                    if (!child.hasOwnProperty('visible')) {\n                                        console.error('Object missing visible property:', child);\n                                    }\n                                    if (child.children) {\n                                        for(let i = 0; i < child.children.length; i++){\n                                            if (child.children[i] === null || child.children[i] === undefined) {\n                                                console.error('Found null/undefined child in scene at index', i, 'of parent:', child);\n                                                hasNullChildren = true;\n                                                // Remove the null child\n                                                child.children.splice(i, 1);\n                                                i--; // Adjust index after removal\n                                            }\n                                        }\n                                    }\n                                }\n                            }[\"LDRViewerComponent.useEffect.animate\"]);\n                            if (hasNullChildren) {\n                                console.warn('Cleaned null children from scene graph after checking', nullCheckCount, 'objects');\n                            }\n                        }\n                        // Update controls and render\n                        // Validate controls state before updating\n                        if (controlsRef.current) {\n                            // Check if controls target is valid\n                            if (!isFinite(controlsRef.current.target.x) || !isFinite(controlsRef.current.target.y) || !isFinite(controlsRef.current.target.z)) {\n                                console.warn('OrbitControls target became invalid, resetting to origin');\n                                controlsRef.current.target.set(0, 0, 0);\n                            }\n                            controlsRef.current.update();\n                        }\n                        // Clean up any null objects in the scene before rendering\n                        const cleanupNullObjects = {\n                            \"LDRViewerComponent.useEffect.animate.cleanupNullObjects\": (obj)=>{\n                                if (!obj || !obj.children) return;\n                                // Filter out null/undefined children\n                                const validChildren = [];\n                                for(let i = 0; i < obj.children.length; i++){\n                                    const child = obj.children[i];\n                                    if (child !== null && child !== undefined && child.visible !== undefined) {\n                                        validChildren.push(child);\n                                        cleanupNullObjects(child); // Recursively clean children\n                                    }\n                                }\n                                // Only update if we removed something\n                                if (validChildren.length !== obj.children.length) {\n                                    obj.children = validChildren;\n                                }\n                            }\n                        }[\"LDRViewerComponent.useEffect.animate.cleanupNullObjects\"];\n                        if (sceneRef.current) {\n                            cleanupNullObjects(sceneRef.current);\n                        }\n                        rendererRef.current.render(sceneRef.current, cameraRef.current);\n                        // Reset error counter on successful render\n                        if (errorCountRef.current > 0) {\n                            console.log('Rendering recovered after', errorCountRef.current, 'errors');\n                            errorCountRef.current = 0;\n                        }\n                    } catch (error) {\n                        errorCountRef.current = (errorCountRef.current || 0) + 1;\n                        if (errorCountRef.current === 1) {\n                            // Only log detailed info on first error\n                            console.error('First error in animation loop:', error);\n                            console.error('Scene children count:', sceneRef.current.children.length);\n                            console.error('Scene state:', sceneRef.current);\n                            console.error('Camera state:', cameraRef.current);\n                            console.error('Controls state:', controlsRef.current);\n                            // Log the model group state\n                            if (modelGroupRef.current) {\n                                console.error('Model group state:', modelGroupRef.current);\n                                console.error('Model visible:', modelGroupRef.current.visible);\n                                console.error('Model children count:', modelGroupRef.current.children.length);\n                            }\n                        }\n                        // Stop animation after too many errors\n                        if (errorCountRef.current > 100) {\n                            console.error('Too many render errors, stopping animation loop');\n                            isAnimatingRef.current = false;\n                        }\n                    }\n                }\n            }[\"LDRViewerComponent.useEffect.animate\"];\n            // Start the animation loop\n            animate();\n            console.log('Animation loop started');\n            return ({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    // Properly clean up animation loop\n                    isAnimatingRef.current = false;\n                    if (animationIdRef.current !== null) {\n                        cancelAnimationFrame(animationIdRef.current);\n                        animationIdRef.current = null;\n                    }\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n        }\n    }[\"LDRViewerComponent.useEffect\"], []);\n    // Test cube commented out - LEGO model should load instead\n    /*\r\n  const cubeRef = useRef<THREE.Mesh | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!sceneRef.current) return;\r\n\r\n    // Prevent adding cube multiple times\r\n    if (cubeRef.current) return;\r\n\r\n    // Add a simple red cube that we know works\r\n    const geometry = new THREE.BoxGeometry(30, 30, 30);\r\n    const material = new THREE.MeshPhongMaterial({\r\n      color: 0xff0000,\r\n      side: THREE.DoubleSide\r\n    });\r\n    const cube = new THREE.Mesh(geometry, material);\r\n    cube.position.set(0, 300, 0);\r\n\r\n    sceneRef.current.add(cube);\r\n\r\n    cubeRef.current = cube;\r\n    console.log('Simple test cube added at:', cube.position);\r\n    console.log('Scene now has', sceneRef.current.children.length, 'children');\r\n\r\n    return () => {\r\n      // Commented out cleanup to keep the cube visible\r\n      // if (sceneRef.current && cube) {\r\n      //   sceneRef.current.remove(cube);  // Also need to prevent removal from scene\r\n      //   geometry.dispose();\r\n      //   material.dispose();\r\n      // }\r\n      // cubeRef.current = null;\r\n    };\r\n  }, []);\r\n  */ // Cube animation commented out since cube is removed\n    /*\r\n  useEffect(() => {\r\n    const animate = () => {\r\n      if (cubeRef.current) {\r\n        cubeRef.current.rotation.x += 0.01;\r\n        cubeRef.current.rotation.y += 0.01;\r\n      }\r\n    };\r\n\r\n    const id = setInterval(animate, 16); // ~60fps\r\n\r\n    // Commented out interval cleanup\r\n    // return () => clearInterval(id);\r\n    return () => {};\r\n  }, []);\r\n  */ // LEGO LOADING CODE\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            // Need either modelPath or ldrawContent\n            if (!modelPath && !ldrawContent || !sceneRef.current || !rendererRef.current || !cameraRef.current) return;\n            // Skip if we're already loading this exact model\n            const currentIdentifier = ldrawContent ? \"content-\".concat(ldrawContent.substring(0, 100)) : modelPath;\n            if (currentModelPathRef.current === currentIdentifier && isLoadingRef.current) {\n                console.log('Same model already loading, skipping...');\n                return;\n            }\n            // Skip if this model is already loaded\n            if (currentModelPathRef.current === currentIdentifier && modelGroupRef.current) {\n                console.log('Model already loaded, skipping...');\n                return;\n            }\n            // Prevent concurrent loads\n            if (isLoadingRef.current) {\n                console.log('Another model is loading, skipping...');\n                return;\n            }\n            // Save camera state before removing model if preserveCamera is true\n            if (preserveCamera && cameraRef.current && controlsRef.current) {\n                savedCameraPosition.current = cameraRef.current.position.clone();\n                savedCameraTarget.current = controlsRef.current.target.clone();\n                console.log('Saved camera position:', savedCameraPosition.current);\n                console.log('Saved camera target:', savedCameraTarget.current);\n            }\n            // Clean up previous model safely\n            if (modelGroupRef.current && sceneRef.current) {\n                console.log('Removing previous model from scene');\n                // Mark as invisible first to prevent render issues\n                modelGroupRef.current.visible = false;\n                // Remove from scene on next tick\n                const modelToRemove = modelGroupRef.current;\n                modelGroupRef.current = null;\n                setTimeout({\n                    \"LDRViewerComponent.useEffect\": ()=>{\n                        if (sceneRef.current && modelToRemove) {\n                            console.log('Actually removing model and disposing resources');\n                            sceneRef.current.remove(modelToRemove);\n                            // Dispose of geometries and materials if needed\n                            modelToRemove.traverse({\n                                \"LDRViewerComponent.useEffect\": (child)=>{\n                                    if (child.geometry) child.geometry.dispose();\n                                    if (child.material) {\n                                        if (Array.isArray(child.material)) {\n                                            child.material.forEach({\n                                                \"LDRViewerComponent.useEffect\": (mat)=>mat.dispose()\n                                            }[\"LDRViewerComponent.useEffect\"]);\n                                        } else {\n                                            child.material.dispose();\n                                        }\n                                    }\n                                }\n                            }[\"LDRViewerComponent.useEffect\"]);\n                            console.log('Model removal complete');\n                        }\n                    }\n                }[\"LDRViewerComponent.useEffect\"], 0);\n            }\n            // Prevent multiple loads of the same model\n            let cancelled = false;\n            isLoadingRef.current = true;\n            currentModelPathRef.current = currentIdentifier || 'generated';\n            // Clear any previous error\n            setLoadError(null);\n            var _loadingManagerRef_current;\n            const loader = new three_examples_jsm_loaders_LDrawLoader_js__WEBPACK_IMPORTED_MODULE_4__.LDrawLoader((_loadingManagerRef_current = loadingManagerRef.current) !== null && _loadingManagerRef_current !== void 0 ? _loadingManagerRef_current : undefined);\n            // Set the parts library path to the ldraw directory\n            loader.setPartsLibraryPath('/ldraw/');\n            // Enable smooth normals for better rendering\n            loader.smoothNormals = true;\n            // Set the file map for better part resolution\n            loader.setFileMap({});\n            // Set the conditional line material class (not an instance)\n            loader.setConditionalLineMaterial(three_examples_jsm_materials_LDrawConditionalLineMaterial_js__WEBPACK_IMPORTED_MODULE_5__.LDrawConditionalLineMaterial);\n            console.log(ldrawContent ? 'Loading LDraw from content' : \"Loading LDR file: \".concat(modelPath));\n            // Try to preload materials first, but don't fail if it doesn't work\n            const materialsPromise = loader.preloadMaterials('/ldraw/LDConfig.ldr').then({\n                \"LDRViewerComponent.useEffect.materialsPromise\": ()=>{\n                    console.log('Materials preloaded successfully');\n                }\n            }[\"LDRViewerComponent.useEffect.materialsPromise\"]).catch({\n                \"LDRViewerComponent.useEffect.materialsPromise\": (err)=>{\n                    console.warn('Could not preload materials, using defaults:', err.message);\n                }\n            }[\"LDRViewerComponent.useEffect.materialsPromise\"]);\n            // Override console.warn to catch subobject loading errors\n            const originalWarn = console.warn;\n            let hasSubobjectError = false;\n            console.warn = ({\n                \"LDRViewerComponent.useEffect\": function() {\n                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                        args[_key] = arguments[_key];\n                    }\n                    const message = args.join(' ');\n                    if (message.includes('could not be loaded') || message.includes('Subobject')) {\n                        hasSubobjectError = true;\n                        // Don't log the warning to console\n                        return;\n                    }\n                    originalWarn.apply(console, args);\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n            // Load the model (wait for materials if possible, but don't block)\n            materialsPromise.finally({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    if (cancelled) return;\n                    // If we have direct content, parse it; otherwise load from file\n                    let modelPromise;\n                    if (ldrawContent) {\n                        // Use parse with callbacks and wrap in a promise\n                        modelPromise = new Promise({\n                            \"LDRViewerComponent.useEffect\": (resolve)=>{\n                                loader.parse(ldrawContent, {\n                                    \"LDRViewerComponent.useEffect\": (group)=>resolve(group)\n                                }[\"LDRViewerComponent.useEffect\"], {\n                                    \"LDRViewerComponent.useEffect\": (error)=>{\n                                        console.error('Error parsing LDraw content:', error);\n                                        resolve(null);\n                                    }\n                                }[\"LDRViewerComponent.useEffect\"]);\n                            }\n                        }[\"LDRViewerComponent.useEffect\"]);\n                    } else if (modelPath) {\n                        modelPromise = loader.loadAsync(modelPath).catch({\n                            \"LDRViewerComponent.useEffect\": (error)=>{\n                                console.error('Error loading model:', error);\n                                return null;\n                            }\n                        }[\"LDRViewerComponent.useEffect\"]);\n                    } else {\n                        modelPromise = Promise.resolve(null);\n                    }\n                    modelPromise.then({\n                        \"LDRViewerComponent.useEffect\": (group)=>{\n                            var _sceneRef_current;\n                            // Restore original console.warn\n                            console.warn = originalWarn;\n                            if (!group || cancelled) return;\n                            // Check if there were subobject errors\n                            if (hasSubobjectError) {\n                                console.log('Model has missing parts, displaying as error');\n                                throw new Error('Missing parts - model cannot be rendered properly');\n                            }\n                            console.log('Model loaded successfully:', group);\n                            isLoadingRef.current = false;\n                            // Safe traversal to handle null objects - just skip them\n                            const safeTraverse = {\n                                \"LDRViewerComponent.useEffect.safeTraverse\": (obj)=>{\n                                    // Skip if null or undefined\n                                    if (!obj) return;\n                                    // Skip if not a valid object\n                                    if (typeof obj !== 'object') return;\n                                    // Skip if doesn't have visible property (not a Three.js object)\n                                    if (!('visible' in obj)) return;\n                                    // Process this object\n                                    if (obj.isMesh) {\n                                        const mesh = obj;\n                                        if (!mesh.material) {\n                                            // Create a default material if missing\n                                            mesh.material = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhongMaterial({\n                                                color: 0x808080,\n                                                side: three__WEBPACK_IMPORTED_MODULE_2__.DoubleSide\n                                            });\n                                            console.log('Added default material to mesh:', mesh.name);\n                                        } else if (Array.isArray(mesh.material)) {\n                                            // Check array of materials\n                                            mesh.material = mesh.material.map({\n                                                \"LDRViewerComponent.useEffect.safeTraverse\": (mat)=>{\n                                                    if (!mat) {\n                                                        console.log('Replacing null material in array');\n                                                        return new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhongMaterial({\n                                                            color: 0x808080,\n                                                            side: three__WEBPACK_IMPORTED_MODULE_2__.DoubleSide\n                                                        });\n                                                    }\n                                                    return mat;\n                                                }\n                                            }[\"LDRViewerComponent.useEffect.safeTraverse\"]);\n                                        }\n                                    }\n                                    // Safely process children - just skip null ones\n                                    if (obj.children && Array.isArray(obj.children)) {\n                                        for (const child of obj.children){\n                                            // Simply skip null/undefined children\n                                            if (child) {\n                                                safeTraverse(child);\n                                            }\n                                        }\n                                    }\n                                }\n                            }[\"LDRViewerComponent.useEffect.safeTraverse\"];\n                            safeTraverse(group);\n                            // Skip step parsing for now - just add the model as-is\n                            /*\r\n        // Parse STEP commands from the LDraw content if available\r\n        let stepBoundaries: number[] = [];\r\n        if (content) {\r\n          const lines = content.split('\\n');\r\n          let partCount = 0;\r\n          lines.forEach(line => {\r\n            const trimmed = line.trim();\r\n            if (trimmed.startsWith('1 ')) {\r\n              // This is a part line\r\n              partCount++;\r\n            } else if (trimmed === '0 STEP' || trimmed.toLowerCase() === '0 step') {\r\n              // This is a STEP command\r\n              stepBoundaries.push(partCount);\r\n              console.log(`Found STEP command after part ${partCount}`);\r\n            }\r\n          });\r\n          if (stepBoundaries.length > 0) {\r\n            console.log(`Found ${stepBoundaries.length} STEP commands in model`);\r\n          }\r\n        }\r\n\r\n        // Organize model into steps based on STEP commands\r\n        const steps: THREE.Group[] = [];\r\n        const allParts: THREE.Object3D[] = [];\r\n\r\n        // Collect only direct child groups/objects (not nested meshes)\r\n        // Each direct child typically represents one part from the LDraw file\r\n        const collectTopLevelParts = (obj: any, depth: number = 0) => {\r\n          // For the root group, process its direct children\r\n          if (depth === 0) {\r\n            obj.children.forEach((child: any) => {\r\n              // Each direct child is typically a part\r\n              if (child.type === 'Group' || child.type === 'Object3D' || child.isMesh || child.isLine) {\r\n                allParts.push(child);\r\n              }\r\n            });\r\n          }\r\n        };\r\n\r\n        collectTopLevelParts(group);\r\n        console.log(`Found ${allParts.length} top-level parts in model`);\r\n\r\n        // If we have STEP commands, organize parts accordingly\r\n        if (stepBoundaries.length > 0 && allParts.length > 0) {\r\n          const totalSteps = stepBoundaries.length;\r\n          console.log(`Organizing ${allParts.length} parts into ${totalSteps} steps`);\r\n          console.log(`Step boundaries (cumulative part counts): ${stepBoundaries.join(', ')}`);\r\n\r\n          // Assign step numbers to each part\r\n          allParts.forEach((part, index) => {\r\n            // Find which step this part belongs to\r\n            let stepNumber = 1;\r\n            for (let i = 0; i < stepBoundaries.length; i++) {\r\n              if (index < stepBoundaries[i]) {\r\n                stepNumber = i + 1;\r\n                break;\r\n              }\r\n            }\r\n\r\n            // Assign step number to this part and all its children\r\n            part.userData.stepNumber = stepNumber;\r\n            part.traverse((child: any) => {\r\n              child.userData.stepNumber = stepNumber;\r\n            });\r\n          });\r\n\r\n          // Create step groups and add parts to them\r\n          for (let stepNum = 1; stepNum <= totalSteps; stepNum++) {\r\n            const stepGroup = new THREE.Group();\r\n            stepGroup.name = `Step ${stepNum}`;\r\n            let partsInStep = 0;\r\n\r\n            allParts.forEach(part => {\r\n              if (part.userData.stepNumber === stepNum) {\r\n                stepGroup.add(part);\r\n                partsInStep++;\r\n              }\r\n            });\r\n\r\n            if (partsInStep > 0) {\r\n              steps.push(stepGroup);\r\n              console.log(`Step ${stepNum}: ${partsInStep} parts`);\r\n            }\r\n          }\r\n\r\n        } else {\r\n          // No STEP commands found, treat all parts as one step\r\n          console.log('No STEP commands found, treating model as single step');\r\n          const singleStep = new THREE.Group();\r\n          singleStep.name = 'Step 1';\r\n          allParts.forEach(part => {\r\n            part.userData.stepNumber = 1;\r\n            part.traverse((child: any) => {\r\n              child.userData.stepNumber = 1;\r\n            });\r\n            singleStep.add(part);\r\n          });\r\n          if (singleStep.children.length > 0) {\r\n            steps.push(singleStep);\r\n          }\r\n        }\r\n\r\n        // Collect all mesh/line objects for visibility control\r\n        const allRenderables: THREE.Object3D[] = [];\r\n        group.traverse((child: any) => {\r\n          if (child.isMesh || child.isLine || child.isLineSegments) {\r\n            allRenderables.push(child);\r\n          }\r\n        });\r\n\r\n        console.log(`Model organized into ${steps.length} steps with ${allRenderables.length} renderable objects`);\r\n        stepsRef.current = steps;\r\n        allPartsRef.current = allRenderables;\r\n        setTotalSteps(steps.length);\r\n        setCurrentStep(steps.length); // Start with all steps visible\r\n        */ // Position model at origin\n                            group.position.set(0, 0, 0);\n                            group.rotation.x = Math.PI; // Rotation can cause issues, keeping it commented\n                            modelGroupRef.current = group;\n                            if (sceneRef.current) {\n                                sceneRef.current.add(group);\n                                console.log('Model added to scene');\n                                console.log('Group children:', group.children.length);\n                                console.log('Group visible:', group.visible);\n                                console.log('Group in scene:', sceneRef.current.children.includes(group));\n                                // Make sure the group is visible\n                                group.visible = true;\n                                group.traverse({\n                                    \"LDRViewerComponent.useEffect\": (child)=>{\n                                        child.visible = true;\n                                    }\n                                }[\"LDRViewerComponent.useEffect\"]);\n                                // Count visible meshes and check materials\n                                let meshCount = 0;\n                                let visibleCount = 0;\n                                group.traverse({\n                                    \"LDRViewerComponent.useEffect\": (child)=>{\n                                        if (child.isMesh) {\n                                            var _mesh_geometry_attributes_position;\n                                            meshCount++;\n                                            const mesh = child;\n                                            if (mesh.visible) visibleCount++;\n                                            if (!mesh.geometry.boundingBox) {\n                                                mesh.geometry.computeBoundingBox();\n                                            }\n                                            // Log mesh details\n                                            console.log('Mesh details:', {\n                                                name: mesh.name,\n                                                visible: mesh.visible,\n                                                material: mesh.material,\n                                                geometryVertices: ((_mesh_geometry_attributes_position = mesh.geometry.attributes.position) === null || _mesh_geometry_attributes_position === void 0 ? void 0 : _mesh_geometry_attributes_position.count) || 0,\n                                                position: mesh.position,\n                                                scale: mesh.scale\n                                            });\n                                            // Make sure mesh has a material\n                                            if (!mesh.material) {\n                                                console.warn('Mesh has no material, adding default');\n                                                mesh.material = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhongMaterial({\n                                                    color: 0xff0000,\n                                                    side: three__WEBPACK_IMPORTED_MODULE_2__.DoubleSide\n                                                });\n                                            }\n                                        }\n                                    }\n                                }[\"LDRViewerComponent.useEffect\"]);\n                                console.log(\"Found \".concat(meshCount, \" meshes, \").concat(visibleCount, \" visible\"));\n                            // Test cube removed - rendering verified to be working\n                            // const testGeometry = new THREE.BoxGeometry(50, 50, 50);\n                            // const testMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00 });\n                            // const testCube = new THREE.Mesh(testGeometry, testMaterial);\n                            // testCube.position.set(100, 25, 0);\n                            // sceneRef.current.add(testCube);\n                            // console.log('Test cube added at:', testCube.position);\n                            }\n                            // Force update matrices before calculating bounding box\n                            group.updateMatrixWorld(true);\n                            // Calculate bounding box and center camera\n                            const box = new three__WEBPACK_IMPORTED_MODULE_2__.Box3().setFromObject(group);\n                            const center = box.getCenter(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3());\n                            const size = box.getSize(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3());\n                            // Log model information\n                            if (!box.isEmpty() && size.x > 0 && size.y > 0 && size.z > 0) {\n                                console.log('Model center:', center.x, center.y, center.z);\n                                console.log('Model size:', size.x, size.y, size.z);\n                            } else {\n                                console.warn('Model has empty/invalid bounding box');\n                            }\n                            if (controlsRef.current && cameraRef.current) {\n                                // Restore camera position if preserveCamera is true and we have saved state\n                                if (preserveCamera && savedCameraPosition.current && savedCameraTarget.current) {\n                                    console.log('Restoring camera position');\n                                    cameraRef.current.position.copy(savedCameraPosition.current);\n                                    controlsRef.current.target.copy(savedCameraTarget.current);\n                                } else {\n                                    // Just update controls to look at origin for initial load\n                                    controlsRef.current.target.set(0, 0, 0);\n                                }\n                                controlsRef.current.update();\n                            }\n                            // The animation loop will handle rendering\n                            console.log('Scene children:', ((_sceneRef_current = sceneRef.current) === null || _sceneRef_current === void 0 ? void 0 : _sceneRef_current.children.length) || 0);\n                        }\n                    }[\"LDRViewerComponent.useEffect\"]).catch({\n                        \"LDRViewerComponent.useEffect\": (error)=>{\n                            // Restore original console.warn in case of error\n                            console.warn = originalWarn;\n                            if (cancelled) return;\n                            console.error('Error loading model:', error);\n                            console.error('Model path:', modelPath);\n                            console.error('Stack trace:', error.stack);\n                            isLoadingRef.current = false;\n                            // Set error message for display\n                            let errorMessage = 'Build failed to render';\n                            if (error.message) {\n                                // Check if it's a missing parts error\n                                if (error.message.includes('Missing parts')) {\n                                    errorMessage = 'Cannot be rendered\\nMissing LEGO parts';\n                                } else {\n                                    // Extract the specific part that failed if available\n                                    const partMatch = error.message.match(/\"([^\"]+\\.dat)\"/);\n                                    if (partMatch) {\n                                        errorMessage = \"Build failed to render\\nInvalid part: \".concat(partMatch[1]);\n                                    }\n                                }\n                            }\n                            setLoadError(errorMessage);\n                        }\n                    }[\"LDRViewerComponent.useEffect\"]);\n                }\n            }[\"LDRViewerComponent.useEffect\"]); // Close the .finally() block\n            // Cleanup function - only remove model if path changes or component unmounts\n            return ({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    cancelled = true;\n                    // Restore original console.warn if it's been overridden\n                    if (console.warn !== originalWarn) {\n                        console.warn = originalWarn;\n                    }\n                // Don't clear the model here - it will be cleared when a new model loads\n                // or when the component unmounts\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n        }\n    }[\"LDRViewerComponent.useEffect\"], [\n        modelPath,\n        ldrawContent\n    ]);\n    // Clean up model when component unmounts\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            return ({\n                \"LDRViewerComponent.useEffect\": ()=>{\n                    if (modelGroupRef.current && sceneRef.current) {\n                        // Mark as invisible first\n                        modelGroupRef.current.visible = false;\n                        // Then remove\n                        sceneRef.current.remove(modelGroupRef.current);\n                        modelGroupRef.current = null;\n                    }\n                    isLoadingRef.current = false;\n                    currentModelPathRef.current = '';\n                }\n            })[\"LDRViewerComponent.useEffect\"];\n        }\n    }[\"LDRViewerComponent.useEffect\"], []);\n    // Update visibility based on current step\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"LDRViewerComponent.useEffect\": ()=>{\n            if (allPartsRef.current.length === 0) return;\n            console.log(\"Updating visibility for step \".concat(currentStep, \" of \").concat(totalSteps));\n            // Show/hide parts based on current step\n            allPartsRef.current.forEach({\n                \"LDRViewerComponent.useEffect\": (part)=>{\n                    const partStep = part.userData.stepNumber || 1;\n                    part.visible = partStep <= currentStep;\n                }\n            }[\"LDRViewerComponent.useEffect\"]);\n        }\n    }[\"LDRViewerComponent.useEffect\"], [\n        currentStep,\n        totalSteps\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            position: 'relative',\n            width: '100%'\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: containerRef,\n                style: {\n                    width: '100%',\n                    height: '600px',\n                    border: '1px solid #ccc',\n                    borderRadius: '8px',\n                    overflow: 'hidden',\n                    position: 'relative'\n                },\n                children: loadError && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    style: {\n                        position: 'absolute',\n                        top: '50%',\n                        left: '50%',\n                        transform: 'translate(-50%, -50%)',\n                        backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                        padding: '20px 30px',\n                        borderRadius: '8px',\n                        boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)',\n                        textAlign: 'center',\n                        zIndex: 100\n                    },\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                color: '#d32f2f',\n                                fontSize: '18px',\n                                fontWeight: '600',\n                                marginBottom: '8px'\n                            },\n                            children: [\n                                \"⚠️ \",\n                                loadError.split('\\n')[0]\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                            lineNumber: 941,\n                            columnNumber: 13\n                        }, undefined),\n                        loadError.includes('\\n') && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                color: '#666',\n                                fontSize: '14px',\n                                marginTop: '8px'\n                            },\n                            children: loadError.split('\\n')[1]\n                        }, void 0, false, {\n                            fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                            lineNumber: 952,\n                            columnNumber: 15\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                    lineNumber: 927,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                lineNumber: 915,\n                columnNumber: 7\n            }, undefined),\n            totalSteps > 1 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    position: 'absolute',\n                    bottom: '20px',\n                    left: '50%',\n                    transform: 'translateX(-50%)',\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                    padding: '15px 20px',\n                    borderRadius: '8px',\n                    boxShadow: '0 2px 10px rgba(0,0,0,0.2)',\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: '15px',\n                    minWidth: '400px',\n                    zIndex: 1000\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                        style: {\n                            fontWeight: 'bold',\n                            fontSize: '14px',\n                            color: '#333',\n                            minWidth: '80px'\n                        },\n                        children: [\n                            \"Step \",\n                            currentStep,\n                            \"/\",\n                            totalSteps\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                        lineNumber: 981,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                        type: \"range\",\n                        min: 1,\n                        max: totalSteps,\n                        value: currentStep,\n                        onChange: (e)=>setCurrentStep(parseInt(e.target.value)),\n                        style: {\n                            flex: 1,\n                            height: '6px',\n                            background: \"linear-gradient(to right, #4CAF50 0%, #4CAF50 \".concat((currentStep - 1) / (totalSteps - 1) * 100, \"%, #ddd \").concat((currentStep - 1) / (totalSteps - 1) * 100, \"%, #ddd 100%)\"),\n                            borderRadius: '3px',\n                            outline: 'none',\n                            cursor: 'pointer'\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                        lineNumber: 989,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            display: 'flex',\n                            gap: '8px'\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>setCurrentStep(Math.max(1, currentStep - 1)),\n                                disabled: currentStep <= 1,\n                                style: {\n                                    padding: '6px 12px',\n                                    backgroundColor: currentStep > 1 ? '#4CAF50' : '#ccc',\n                                    color: 'white',\n                                    border: 'none',\n                                    borderRadius: '4px',\n                                    cursor: currentStep > 1 ? 'pointer' : 'not-allowed',\n                                    fontSize: '12px',\n                                    fontWeight: 'bold'\n                                },\n                                children: \"← Prev\"\n                            }, void 0, false, {\n                                fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                                lineNumber: 1008,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>setCurrentStep(Math.min(totalSteps, currentStep + 1)),\n                                disabled: currentStep >= totalSteps,\n                                style: {\n                                    padding: '6px 12px',\n                                    backgroundColor: currentStep < totalSteps ? '#4CAF50' : '#ccc',\n                                    color: 'white',\n                                    border: 'none',\n                                    borderRadius: '4px',\n                                    cursor: currentStep < totalSteps ? 'pointer' : 'not-allowed',\n                                    fontSize: '12px',\n                                    fontWeight: 'bold'\n                                },\n                                children: \"Next →\"\n                            }, void 0, false, {\n                                fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                                lineNumber: 1024,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>setCurrentStep(currentStep === totalSteps ? 1 : totalSteps),\n                                style: {\n                                    padding: '6px 12px',\n                                    backgroundColor: '#2196F3',\n                                    color: 'white',\n                                    border: 'none',\n                                    borderRadius: '4px',\n                                    cursor: 'pointer',\n                                    fontSize: '12px',\n                                    fontWeight: 'bold'\n                                },\n                                children: currentStep === totalSteps ? 'Reset' : 'All'\n                            }, void 0, false, {\n                                fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                                lineNumber: 1040,\n                                columnNumber: 13\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                        lineNumber: 1004,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n                lineNumber: 966,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/gnome/lego/brickyard/components/LDRViewer.tsx\",\n        lineNumber: 914,\n        columnNumber: 5\n    }, undefined);\n};\n_s(LDRViewerComponent, \"sdjX9Y5L7+TurB1ObkNBvCF6Y7s=\");\n_c = LDRViewerComponent;\nconst LDRViewer = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(LDRViewerComponent);\n_c1 = LDRViewer;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LDRViewer);\nvar _c, _c1;\n$RefreshReg$(_c, \"LDRViewerComponent\");\n$RefreshReg$(_c1, \"LDRViewer\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL2NvbXBvbmVudHMvTERSVmlld2VyLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUF1RDtBQUN4QjtBQUM4QztBQUNMO0FBQ29DO0FBUTVHLE1BQU1RLHFCQUErQztRQUFDLEVBQUVDLFNBQVMsRUFBRUMsWUFBWSxFQUFFQyxjQUFjLEVBQUU7O0lBQy9GLE1BQU1DLGVBQWVWLDZDQUFNQSxDQUFpQjtJQUM1QyxNQUFNVyxXQUFXWCw2Q0FBTUEsQ0FBcUI7SUFDNUMsTUFBTVksY0FBY1osNkNBQU1BLENBQTZCO0lBQ3ZELE1BQU1hLFlBQVliLDZDQUFNQSxDQUFpQztJQUN6RCxNQUFNYyxjQUFjZCw2Q0FBTUEsQ0FBdUI7SUFDakQsTUFBTWUsZ0JBQWdCZiw2Q0FBTUEsQ0FBcUI7SUFDakQsTUFBTWdCLG9CQUFvQmhCLDZDQUFNQSxDQUE4QjtJQUM5RCxNQUFNaUIsZUFBZWpCLDZDQUFNQSxDQUFVO0lBQ3JDLE1BQU1rQixzQkFBc0JsQiw2Q0FBTUEsQ0FBUztJQUMzQyxNQUFNbUIsbUJBQW1CbkIsNkNBQU1BLENBQVU7SUFDekMsTUFBTW9CLGdCQUFnQnBCLDZDQUFNQSxDQUFTO0lBRXJDLHNDQUFzQztJQUN0QyxNQUFNLENBQUNxQixXQUFXQyxhQUFhLEdBQUd4QixxREFBYyxDQUFnQjtJQUVoRSw0QkFBNEI7SUFDNUIsTUFBTTBCLHNCQUFzQnhCLDZDQUFNQSxDQUF1QjtJQUN6RCxNQUFNeUIsb0JBQW9CekIsNkNBQU1BLENBQXVCO0lBRXZELGVBQWU7SUFDZixNQUFNLENBQUMwQixhQUFhQyxlQUFlLEdBQUc3QixxREFBYyxDQUFTO0lBQzdELE1BQU0sQ0FBQzhCLFlBQVlDLGNBQWMsR0FBRy9CLHFEQUFjLENBQVM7SUFDM0QsTUFBTWdDLFdBQVc5Qiw2Q0FBTUEsQ0FBZ0IsRUFBRTtJQUN6QyxNQUFNK0IsY0FBYy9CLDZDQUFNQSxDQUFtQixFQUFFO0lBRS9DLG1DQUFtQztJQUNuQ0QsZ0RBQVNBO3dDQUFD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QUtzRCxHQUFHLENBQUMvTSxZQUFZRixjQUFjO2dDQUNqRTROLFVBQVU1TixlQUFlRTtnQ0FDekJzTCxPQUFPO29DQUNMUyxTQUFTO29DQUNURCxpQkFBaUJoTSxjQUFjRSxhQUFhLFlBQVk7b0NBQ3hEbUosT0FBTztvQ0FDUHFDLFFBQVE7b0NBQ1JDLGNBQWM7b0NBQ2Q4QixRQUFRek4sY0FBY0UsYUFBYSxZQUFZO29DQUMvQ21NLFVBQVU7b0NBQ1ZDLFlBQVk7Z0NBQ2Q7MENBQ0Q7Ozs7OzswQ0FHRCw4REFBQ29CO2dDQUNDQyxTQUFTLElBQU0xTixlQUFlRCxnQkFBZ0JFLGFBQWEsSUFBSUE7Z0NBQy9Ec0wsT0FBTztvQ0FDTFMsU0FBUztvQ0FDVEQsaUJBQWlCO29DQUNqQjNDLE9BQU87b0NBQ1BxQyxRQUFRO29DQUNSQyxjQUFjO29DQUNkOEIsUUFBUTtvQ0FDUnBCLFVBQVU7b0NBQ1ZDLFlBQVk7Z0NBQ2Q7MENBRUN0TSxnQkFBZ0JFLGFBQWEsVUFBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBT3REO0dBdmhDTXRCO0tBQUFBO0FBeWhDTixNQUFNaVAsMEJBQVl0UCwyQ0FBSUEsQ0FBQ0s7O0FBQ3ZCLGlFQUFlaVAsU0FBU0EsRUFBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2dub21lL2xlZ28vYnJpY2t5YXJkL2NvbXBvbmVudHMvTERSVmlld2VyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYsIG1lbW8gfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuaW1wb3J0IHsgT3JiaXRDb250cm9scyB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9jb250cm9scy9PcmJpdENvbnRyb2xzLmpzJztcclxuaW1wb3J0IHsgTERyYXdMb2FkZXIgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vbG9hZGVycy9MRHJhd0xvYWRlci5qcyc7XHJcbmltcG9ydCB7IExEcmF3Q29uZGl0aW9uYWxMaW5lTWF0ZXJpYWwgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vbWF0ZXJpYWxzL0xEcmF3Q29uZGl0aW9uYWxMaW5lTWF0ZXJpYWwuanMnO1xyXG5cclxuaW50ZXJmYWNlIExEUlZpZXdlclByb3BzIHtcclxuICBtb2RlbFBhdGg/OiBzdHJpbmc7XHJcbiAgbGRyYXdDb250ZW50Pzogc3RyaW5nO1xyXG4gIHByZXNlcnZlQ2FtZXJhPzogYm9vbGVhbjtcclxufVxyXG5cclxuY29uc3QgTERSVmlld2VyQ29tcG9uZW50OiBSZWFjdC5GQzxMRFJWaWV3ZXJQcm9wcz4gPSAoeyBtb2RlbFBhdGgsIGxkcmF3Q29udGVudCwgcHJlc2VydmVDYW1lcmEgfSkgPT4ge1xyXG4gIGNvbnN0IGNvbnRhaW5lclJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XHJcbiAgY29uc3Qgc2NlbmVSZWYgPSB1c2VSZWY8VEhSRUUuU2NlbmUgfCBudWxsPihudWxsKTtcclxuICBjb25zdCByZW5kZXJlclJlZiA9IHVzZVJlZjxUSFJFRS5XZWJHTFJlbmRlcmVyIHwgbnVsbD4obnVsbCk7XHJcbiAgY29uc3QgY2FtZXJhUmVmID0gdXNlUmVmPFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhIHwgbnVsbD4obnVsbCk7XHJcbiAgY29uc3QgY29udHJvbHNSZWYgPSB1c2VSZWY8T3JiaXRDb250cm9scyB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IG1vZGVsR3JvdXBSZWYgPSB1c2VSZWY8VEhSRUUuR3JvdXAgfCBudWxsPihudWxsKTtcclxuICBjb25zdCBsb2FkaW5nTWFuYWdlclJlZiA9IHVzZVJlZjxUSFJFRS5Mb2FkaW5nTWFuYWdlciB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IGlzTG9hZGluZ1JlZiA9IHVzZVJlZjxib29sZWFuPihmYWxzZSk7XHJcbiAgY29uc3QgY3VycmVudE1vZGVsUGF0aFJlZiA9IHVzZVJlZjxzdHJpbmc+KCcnKTtcclxuICBjb25zdCBpc0luaXRpYWxpemVkUmVmID0gdXNlUmVmPGJvb2xlYW4+KGZhbHNlKTtcclxuICBjb25zdCBlcnJvckNvdW50UmVmID0gdXNlUmVmPG51bWJlcj4oMCk7XHJcblxyXG4gIC8vIEVycm9yIHN0YXRlIGZvciBkaXNwbGF5aW5nIG1lc3NhZ2VzXHJcbiAgY29uc3QgW2xvYWRFcnJvciwgc2V0TG9hZEVycm9yXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xyXG5cclxuICAvLyBDYW1lcmEgc3RhdGUgcHJlc2VydmF0aW9uXHJcbiAgY29uc3Qgc2F2ZWRDYW1lcmFQb3NpdGlvbiA9IHVzZVJlZjxUSFJFRS5WZWN0b3IzIHwgbnVsbD4obnVsbCk7XHJcbiAgY29uc3Qgc2F2ZWRDYW1lcmFUYXJnZXQgPSB1c2VSZWY8VEhSRUUuVmVjdG9yMyB8IG51bGw+KG51bGwpO1xyXG5cclxuICAvLyBTdGVwIGNvbnRyb2xcclxuICBjb25zdCBbY3VycmVudFN0ZXAsIHNldEN1cnJlbnRTdGVwXSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlcj4oMSk7XHJcbiAgY29uc3QgW3RvdGFsU3RlcHMsIHNldFRvdGFsU3RlcHNdID0gUmVhY3QudXNlU3RhdGU8bnVtYmVyPigxKTtcclxuICBjb25zdCBzdGVwc1JlZiA9IHVzZVJlZjxUSFJFRS5Hcm91cFtdPihbXSk7XHJcbiAgY29uc3QgYWxsUGFydHNSZWYgPSB1c2VSZWY8VEhSRUUuT2JqZWN0M0RbXT4oW10pO1xyXG5cclxuICAvLyBDcmVhdGUgbG9hZGluZyBtYW5hZ2VyIG9ubHkgb25jZVxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobG9hZGluZ01hbmFnZXJSZWYuY3VycmVudCkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IG1hbmFnZXIgPSBuZXcgVEhSRUUuTG9hZGluZ01hbmFnZXIoKTtcclxuXHJcbiAgICAvLyBJbXBsZW1lbnQgcGF0aCByZXNvbHV0aW9uIHN0cmF0ZWd5IHNpbWlsYXIgdG8gVGhyZWUuanMgcGFja0xEcmF3TW9kZWxcclxuICAgIG1hbmFnZXIuc2V0VVJMTW9kaWZpZXIoKHVybCkgPT4ge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnT3JpZ2luYWwgVVJMOicsIHVybCk7XHJcblxyXG4gICAgICAvLyBOb3JtYWxpemUgcGF0aCBzZXBhcmF0b3JzXHJcbiAgICAgIGxldCBub3JtYWxpemVkID0gdXJsLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcclxuXHJcbiAgICAgIC8vIEhhbmRsZSBzXFwgcHJlZml4IGZvciBzdWJwYXJ0cyAoY29udmVydCBzXFxmaWxlLmRhdCB0byBzL2ZpbGUuZGF0KVxyXG4gICAgICBpZiAobm9ybWFsaXplZC5pbmNsdWRlcygncy8nKSB8fCBub3JtYWxpemVkLm1hdGNoKC9zW1xcXFxcXC9dLykpIHtcclxuICAgICAgICBjb25zdCBwYXJ0cyA9IG5vcm1hbGl6ZWQuc3BsaXQoL1tcXFxcXFwvXS8pO1xyXG4gICAgICAgIGNvbnN0IGxhc3RUd28gPSBwYXJ0cy5zbGljZSgtMik7XHJcbiAgICAgICAgaWYgKGxhc3RUd29bMF0gPT09ICdzJykge1xyXG4gICAgICAgICAgLy8gVGhpcyBpcyBhIHN1YnBhcnQgcmVmZXJlbmNlXHJcbiAgICAgICAgICBub3JtYWxpemVkID0gYC9sZHJhdy9wYXJ0cy9zLyR7bGFzdFR3b1sxXX1gO1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ1N1YnBhcnQgZGV0ZWN0ZWQsIG5vcm1hbGl6ZWQgdG86Jywgbm9ybWFsaXplZCk7XHJcbiAgICAgICAgICByZXR1cm4gbm9ybWFsaXplZDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEV4dHJhY3QgdGhlIGZpbGVuYW1lIGFuZCBjaGVjayBmb3Igc3ViZGlyZWN0b3J5IChsaWtlIHMvKVxyXG4gICAgICBjb25zdCB1cmxQYXJ0cyA9IG5vcm1hbGl6ZWQuc3BsaXQoJy8nKTtcclxuICAgICAgY29uc3QgZmlsZW5hbWUgPSB1cmxQYXJ0c1t1cmxQYXJ0cy5sZW5ndGggLSAxXS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICBjb25zdCBoYXNTdWJkaXIgPSB1cmxQYXJ0cy5sZW5ndGggPj0gMiAmJiB1cmxQYXJ0c1t1cmxQYXJ0cy5sZW5ndGggLSAyXSA9PT0gJ3MnO1xyXG5cclxuICAgICAgLy8gRGVmaW5lIHBvc3NpYmxlIHBhdGggcHJlZml4ZXMgdG8gdHJ5XHJcbiAgICAgIGNvbnN0IHBhdGhQcmVmaXhlcyA9IFtcclxuICAgICAgICAnL291dHB1dC8nLCAgICAgICAgICAvLyBPdXRwdXQgZGlyZWN0b3J5IGZvciBnZW5lcmF0ZWQgbW9kZWxzXHJcbiAgICAgICAgJy9sZHJhdy8nLCAgICAgICAgICAgLy8gRGlyZWN0IHBhdGhcclxuICAgICAgICAnL2xkcmF3L3AvJywgICAgICAgICAvLyBQcmltaXRpdmVzXHJcbiAgICAgICAgJy9sZHJhdy9wYXJ0cy8nLCAgICAgLy8gUGFydHNcclxuICAgICAgXTtcclxuXHJcbiAgICAgIC8vIElmIHRoZSBVUkwgYWxyZWFkeSBoYXMgYSB2YWxpZCBwcmVmaXgsIGNsZWFuIGl0IHVwXHJcbiAgICAgIGZvciAoY29uc3QgcHJlZml4IG9mIHBhdGhQcmVmaXhlcykge1xyXG4gICAgICAgIGlmIChub3JtYWxpemVkLmluY2x1ZGVzKHByZWZpeCkpIHtcclxuICAgICAgICAgIC8vIENsZWFuIHVwIGFueSBkdXBsaWNhdGUgcGF0aCBzZWdtZW50c1xyXG4gICAgICAgICAgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQucmVwbGFjZSgvXFwvbGRyYXdcXC9wYXJ0c1xcL3BhcnRzXFwvL2csICcvbGRyYXcvcGFydHMvJyk7XHJcbiAgICAgICAgICBub3JtYWxpemVkID0gbm9ybWFsaXplZC5yZXBsYWNlKC9cXC9sZHJhd1xcL3BcXC9wXFwvL2csICcvbGRyYXcvcC8nKTtcclxuICAgICAgICAgIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVkLnJlcGxhY2UoL1xcL291dHB1dFxcL291dHB1dFxcLy9nLCAnL291dHB1dC8nKTtcclxuXHJcbiAgICAgICAgICAvLyBSZW1vdmUgYW55IHJlZHVuZGFudCBwYXRoIGNvbWJpbmF0aW9ucyBidXQgcHJlc2VydmUgcy8gc3ViZGlyZWN0b3J5XHJcbiAgICAgICAgICBpZiAoIW5vcm1hbGl6ZWQuaW5jbHVkZXMoJy9zLycpKSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVkLnJlcGxhY2UoL1xcL2xkcmF3XFwvcGFydHNcXC9wXFwvL2csICcvbGRyYXcvcC8nKTtcclxuICAgICAgICAgICAgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQucmVwbGFjZSgvXFwvb3V0cHV0XFwvcFxcLy9nLCAnL2xkcmF3L3AvJyk7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVkLnJlcGxhY2UoL1xcL2xkcmF3XFwvcFxcL3BhcnRzXFwvL2csICcvbGRyYXcvcGFydHMvJyk7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVkLnJlcGxhY2UoL1xcL291dHB1dFxcL3BhcnRzXFwvL2csICcvbGRyYXcvcGFydHMvJyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBIYW5kbGUgc3VicGFydHMgaW4gcy8gZGlyZWN0b3J5XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVkLnJlcGxhY2UoL1xcL2xkcmF3XFwvcGFydHNcXC9wYXJ0c1xcL3NcXC8vZywgJy9sZHJhdy9wYXJ0cy9zLycpO1xyXG4gICAgICAgICAgICBub3JtYWxpemVkID0gbm9ybWFsaXplZC5yZXBsYWNlKC9cXC9sZHJhd1xcL3BcXC9wYXJ0c1xcL3NcXC8vZywgJy9sZHJhdy9wYXJ0cy9zLycpO1xyXG4gICAgICAgICAgICBub3JtYWxpemVkID0gbm9ybWFsaXplZC5yZXBsYWNlKC9cXC9vdXRwdXRcXC9wYXJ0c1xcL3NcXC8vZywgJy9sZHJhdy9wYXJ0cy9zLycpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdOb3JtYWxpemVkIFVSTDonLCBub3JtYWxpemVkKTtcclxuICAgICAgICAgIHJldHVybiBub3JtYWxpemVkO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSWYgbm8gdmFsaWQgcHJlZml4IGZvdW5kLCB0cnkgdG8gY29uc3RydWN0IHRoZSBwYXRoXHJcbiAgICAgIC8vIFRoaXMgaGFuZGxlcyBjYXNlcyB3aGVyZSB0aGUgVVJMIGlzIGp1c3QgYSBmaWxlbmFtZSBvciByZWxhdGl2ZSBwYXRoXHJcbiAgICAgIGlmICghbm9ybWFsaXplZC5zdGFydHNXaXRoKCcvbGRyYXcvJykpIHtcclxuICAgICAgICAvLyBIYW5kbGUgc3VicGFydHMgKGZpbGVzIGluIHMvIGRpcmVjdG9yeSlcclxuICAgICAgICBpZiAoaGFzU3ViZGlyKSB7XHJcbiAgICAgICAgICBub3JtYWxpemVkID0gYC9sZHJhdy9wYXJ0cy9zLyR7ZmlsZW5hbWV9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgaXQncyBhIHByaW1pdGl2ZSAodXN1YWxseSBzdGFydCB3aXRoIG51bWJlcnMgb3Igc3BlY2lmaWMgcGF0dGVybnMpXHJcbiAgICAgICAgZWxzZSBpZiAoZmlsZW5hbWUubWF0Y2goL15cXGQvKSB8fCBmaWxlbmFtZS5zdGFydHNXaXRoKCdzdHVkJykgfHwgZmlsZW5hbWUuc3RhcnRzV2l0aCgnZWRnZScpKSB7XHJcbiAgICAgICAgICBub3JtYWxpemVkID0gYC9sZHJhdy9wLyR7ZmlsZW5hbWV9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRGVmYXVsdCB0byBwYXJ0cyBkaXJlY3RvcnkgZm9yIG90aGVyIC5kYXQgZmlsZXNcclxuICAgICAgICBlbHNlIGlmIChmaWxlbmFtZS5lbmRzV2l0aCgnLmRhdCcpKSB7XHJcbiAgICAgICAgICBub3JtYWxpemVkID0gYC9sZHJhdy9wYXJ0cy8ke2ZpbGVuYW1lfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEZvciBMRFIgZmlsZXMsIHVzZSBvdXRwdXQgZGlyZWN0b3J5XHJcbiAgICAgICAgZWxzZSBpZiAoZmlsZW5hbWUuZW5kc1dpdGgoJy5sZHInKSB8fCBmaWxlbmFtZS5lbmRzV2l0aCgnLm1wZCcpKSB7XHJcbiAgICAgICAgICBub3JtYWxpemVkID0gYC9vdXRwdXQvJHtmaWxlbmFtZX1gO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnQ29uc3RydWN0ZWQgVVJMOicsIG5vcm1hbGl6ZWQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbm9ybWFsaXplZDtcclxuICAgIH0pO1xyXG5cclxuICAgIGxvYWRpbmdNYW5hZ2VyUmVmLmN1cnJlbnQgPSBtYW5hZ2VyO1xyXG5cclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIG1hbmFnZXIuc2V0VVJMTW9kaWZpZXIodW5kZWZpbmVkKTtcclxuICAgICAgbG9hZGluZ01hbmFnZXJSZWYuY3VycmVudCA9IG51bGw7XHJcbiAgICB9O1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICghY29udGFpbmVyUmVmLmN1cnJlbnQgfHwgaXNJbml0aWFsaXplZFJlZi5jdXJyZW50KSByZXR1cm47XHJcblxyXG4gICAgaXNJbml0aWFsaXplZFJlZi5jdXJyZW50ID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdCBjb250YWluZXIgPSBjb250YWluZXJSZWYuY3VycmVudDtcclxuICAgIGNvbnN0IHdpZHRoID0gY29udGFpbmVyLmNsaWVudFdpZHRoO1xyXG4gICAgY29uc3QgaGVpZ2h0ID0gY29udGFpbmVyLmNsaWVudEhlaWdodDtcclxuXHJcbiAgICBjb25zdCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG4gICAgc2NlbmUuYmFja2dyb3VuZCA9IG5ldyBUSFJFRS5Db2xvcigweGVlZWVlZSk7XHJcbiAgICBzY2VuZVJlZi5jdXJyZW50ID0gc2NlbmU7XHJcblxyXG4gICAgLy8gQ2FtZXJhIHdpdGggc2V0dGluZ3Mgb3B0aW1pemVkIGZvciBsYXJnZSBMRUdPIG1vZGVsc1xyXG4gICAgY29uc3QgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDQ1LCB3aWR0aCAvIGhlaWdodCwgMC4xLCAxMDAwMDApO1xyXG4gICAgY2FtZXJhLnBvc2l0aW9uLnNldCgzMDAsIDQwMCwgNzAwKTtcclxuICAgIGNhbWVyYVJlZi5jdXJyZW50ID0gY2FtZXJhO1xyXG5cclxuICAgIGNvbnN0IHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoeyBhbnRpYWxpYXM6IHRydWUgfSk7XHJcbiAgICByZW5kZXJlci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgcmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XHJcbiAgICByZW5kZXJlclJlZi5jdXJyZW50ID0gcmVuZGVyZXI7XHJcblxyXG4gICAgY29uc3QgY29udHJvbHMgPSBuZXcgT3JiaXRDb250cm9scyhjYW1lcmEsIHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xyXG4gICAgY29udHJvbHMuZW5hYmxlRGFtcGluZyA9IHRydWU7XHJcbiAgICBjb250cm9scy5kYW1waW5nRmFjdG9yID0gMC4wNTtcclxuICAgIGNvbnRyb2xzLmVuYWJsZVBhbiA9IHRydWU7XHJcbiAgICBjb250cm9scy5lbmFibGVSb3RhdGUgPSB0cnVlO1xyXG4gICAgY29udHJvbHMuZW5hYmxlWm9vbSA9IHRydWU7XHJcbiAgICBjb250cm9scy5zY3JlZW5TcGFjZVBhbm5pbmcgPSBmYWxzZTtcclxuICAgIGNvbnRyb2xzLm1pbkRpc3RhbmNlID0gMTA7XHJcbiAgICBjb250cm9scy5tYXhEaXN0YW5jZSA9IDUwMDAwOyAgLy8gR3JlYXRseSBpbmNyZWFzZWQgbWF4IHpvb20gb3V0IGRpc3RhbmNlXHJcbiAgICBjb250cm9scy50YXJnZXQuc2V0KDAsIDAsIDApO1xyXG4gICAgY29udHJvbHNSZWYuY3VycmVudCA9IGNvbnRyb2xzO1xyXG5cclxuICAgIC8vIEVuaGFuY2VkIGxpZ2h0aW5nIGZvciBiZXR0ZXIgdmlzaWJpbGl0eVxyXG4gICAgc2NlbmUuYWRkKG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHhmZmZmZmYsIDAuOSkpOyAvLyBCcmlnaHRlciBhbWJpZW50IGxpZ2h0XHJcblxyXG4gICAgLy8gTWFpbiBkaXJlY3Rpb25hbCBsaWdodFxyXG4gICAgY29uc3QgZGlyTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGZmZmZmZiwgMS4wKTtcclxuICAgIGRpckxpZ2h0LnBvc2l0aW9uLnNldCg1MDAsIDEwMDAsIDUwMCk7XHJcbiAgICBkaXJMaWdodC5jYXN0U2hhZG93ID0gZmFsc2U7XHJcbiAgICBzY2VuZS5hZGQoZGlyTGlnaHQpO1xyXG5cclxuICAgIC8vIEFkZGl0aW9uYWwgZmlsbCBsaWdodHMgZnJvbSBkaWZmZXJlbnQgYW5nbGVzXHJcbiAgICBjb25zdCBmaWxsTGlnaHQxID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHhmZmZmZmYsIDAuNSk7XHJcbiAgICBmaWxsTGlnaHQxLnBvc2l0aW9uLnNldCgtNTAwLCA1MDAsIC01MDApO1xyXG4gICAgc2NlbmUuYWRkKGZpbGxMaWdodDEpO1xyXG5cclxuICAgIGNvbnN0IGZpbGxMaWdodDIgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGZmZmZmZiwgMC41KTtcclxuICAgIGZpbGxMaWdodDIucG9zaXRpb24uc2V0KDUwMCwgNTAwLCAtNTAwKTtcclxuICAgIHNjZW5lLmFkZChmaWxsTGlnaHQyKTtcclxuXHJcbiAgICAvLyBBZGQgYSBoZW1pc3BoZXJlIGxpZ2h0IGZvciBtb3JlIG5hdHVyYWwgbGlnaHRpbmdcclxuICAgIGNvbnN0IGhlbWlMaWdodCA9IG5ldyBUSFJFRS5IZW1pc3BoZXJlTGlnaHQoMHhmZmZmZmYsIDB4Y2NjY2NjLCAwLjQpO1xyXG4gICAgaGVtaUxpZ2h0LnBvc2l0aW9uLnNldCgwLCA1MDAsIDApO1xyXG4gICAgc2NlbmUuYWRkKGhlbWlMaWdodCk7XHJcblxyXG4gICAgLy8gR3JpZCBoZWxwZXIgcmVtb3ZlZFxyXG4gICAgLy8gY29uc3QgZ3JpZEhlbHBlciA9IG5ldyBUSFJFRS5HcmlkSGVscGVyKDEwMDAsIDIwKTtcclxuICAgIC8vIHNjZW5lLmFkZChncmlkSGVscGVyKTtcclxuXHJcbiAgICAvLyBBZGQgYXhlcyBoZWxwZXJcclxuICAgIGNvbnN0IGF4ZXNIZWxwZXIgPSBuZXcgVEhSRUUuQXhlc0hlbHBlcig1MDApO1xyXG4gICAgc2NlbmUuYWRkKGF4ZXNIZWxwZXIpO1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcclxuICAgICAgaWYgKCFjb250YWluZXJSZWYuY3VycmVudCB8fCAhY2FtZXJhUmVmLmN1cnJlbnQgfHwgIXJlbmRlcmVyUmVmLmN1cnJlbnQpIHJldHVybjtcclxuICAgICAgY29uc3QgdyA9IGNvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudFdpZHRoO1xyXG4gICAgICBjb25zdCBoID0gY29udGFpbmVyUmVmLmN1cnJlbnQuY2xpZW50SGVpZ2h0O1xyXG4gICAgICByZW5kZXJlclJlZi5jdXJyZW50LnNldFNpemUodywgaCk7XHJcbiAgICAgIGNhbWVyYVJlZi5jdXJyZW50LmFzcGVjdCA9IHcgLyBoO1xyXG4gICAgICBjYW1lcmFSZWYuY3VycmVudC51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xyXG5cclxuICAgIC8vIEFuaW1hdGlvbiBsb29wIGlzIG5vdyBoYW5kbGVkIGluIHRoZSBjdWJlIGVmZmVjdFxyXG4gICAgY29uc29sZS5sb2coJ1NjZW5lIGluaXRpYWxpemVkJyk7XHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XHJcbiAgICAgIC8vIEtlZXAgcmVuZGVyZXIgaW50YWN0IGJ1dCBjbGVhbiB1cCBldmVudCBsaXN0ZW5lclxyXG4gICAgICAvLyBpZiAocmVuZGVyZXJSZWYuY3VycmVudCAmJiBjb250YWluZXJSZWYuY3VycmVudCkge1xyXG4gICAgICAvLyAgIGNvbnRhaW5lclJlZi5jdXJyZW50LnJlbW92ZUNoaWxkKHJlbmRlcmVyUmVmLmN1cnJlbnQuZG9tRWxlbWVudCk7XHJcbiAgICAgIC8vICAgcmVuZGVyZXJSZWYuY3VycmVudC5kaXNwb3NlKCk7XHJcbiAgICAgIC8vIH1cclxuICAgICAgLy8gaXNJbml0aWFsaXplZFJlZi5jdXJyZW50ID0gZmFsc2U7XHJcbiAgICB9O1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8gQW5pbWF0aW9uIGxvb3AgLSB1c2luZyB1c2VSZWYgdG8gZW5zdXJlIHNpbmdsZSBpbnN0YW5jZVxyXG4gIGNvbnN0IGFuaW1hdGlvbklkUmVmID0gdXNlUmVmPG51bWJlciB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IGlzQW5pbWF0aW5nUmVmID0gdXNlUmVmPGJvb2xlYW4+KGZhbHNlKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICghc2NlbmVSZWYuY3VycmVudCB8fCAhcmVuZGVyZXJSZWYuY3VycmVudCB8fCAhY2FtZXJhUmVmLmN1cnJlbnQgfHwgIWNvbnRyb2xzUmVmLmN1cnJlbnQpIHJldHVybjtcclxuXHJcbiAgICAvLyBQcmV2ZW50IG11bHRpcGxlIGFuaW1hdGlvbiBsb29wc1xyXG4gICAgaWYgKGlzQW5pbWF0aW5nUmVmLmN1cnJlbnQpIHtcclxuICAgICAgY29uc29sZS5sb2coJ0FuaW1hdGlvbiBhbHJlYWR5IHJ1bm5pbmcsIHNraXBwaW5nLi4uJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDb21tZW50ZWQgb3V0IGNhbmNlbGxhdGlvblxyXG4gICAgLy8gaWYgKGFuaW1hdGlvbklkUmVmLmN1cnJlbnQgIT09IG51bGwpIHtcclxuICAgIC8vICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uSWRSZWYuY3VycmVudCk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgaXNBbmltYXRpbmdSZWYuY3VycmVudCA9IHRydWU7XHJcblxyXG4gICAgY29uc3QgYW5pbWF0ZSA9ICgpID0+IHtcclxuICAgICAgaWYgKCFpc0FuaW1hdGluZ1JlZi5jdXJyZW50KSByZXR1cm47XHJcblxyXG4gICAgICAvLyBDaGVjayBhbGwgcmVmcyBiZWZvcmUgc2NoZWR1bGluZyBuZXh0IGZyYW1lXHJcbiAgICAgIGlmICghY29udHJvbHNSZWYuY3VycmVudCB8fCAhcmVuZGVyZXJSZWYuY3VycmVudCB8fCAhc2NlbmVSZWYuY3VycmVudCB8fCAhY2FtZXJhUmVmLmN1cnJlbnQpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ0FuaW1hdGlvbiBsb29wIHN0b3BwZWQ6IG1pc3NpbmcgcmVmcycpO1xyXG4gICAgICAgIGlzQW5pbWF0aW5nUmVmLmN1cnJlbnQgPSBmYWxzZTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGFuaW1hdGlvbklkUmVmLmN1cnJlbnQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcblxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIE9ubHkgdmFsaWRhdGUgc2NlbmUgaWYgd2UndmUgaGFkIHJlY2VudCBlcnJvcnNcclxuICAgICAgICBpZiAoZXJyb3JDb3VudFJlZi5jdXJyZW50ID4gMCAmJiBlcnJvckNvdW50UmVmLmN1cnJlbnQgPCA1KSB7XHJcbiAgICAgICAgICBsZXQgaGFzTnVsbENoaWxkcmVuID0gZmFsc2U7XHJcbiAgICAgICAgICBsZXQgbnVsbENoZWNrQ291bnQgPSAwO1xyXG4gICAgICAgICAgc2NlbmVSZWYuY3VycmVudC50cmF2ZXJzZSgoY2hpbGQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBudWxsQ2hlY2tDb3VudCsrO1xyXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgb2JqZWN0IGl0c2VsZiBoYXMgcmVxdWlyZWQgcHJvcGVydGllc1xyXG4gICAgICAgICAgICBpZiAoIWNoaWxkLmhhc093blByb3BlcnR5KCd2aXNpYmxlJykpIHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdPYmplY3QgbWlzc2luZyB2aXNpYmxlIHByb3BlcnR5OicsIGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNoaWxkLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmNoaWxkcmVuW2ldID09PSBudWxsIHx8IGNoaWxkLmNoaWxkcmVuW2ldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRm91bmQgbnVsbC91bmRlZmluZWQgY2hpbGQgaW4gc2NlbmUgYXQgaW5kZXgnLCBpLCAnb2YgcGFyZW50OicsIGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgaGFzTnVsbENoaWxkcmVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBudWxsIGNoaWxkXHJcbiAgICAgICAgICAgICAgICAgIGNoaWxkLmNoaWxkcmVuLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgaS0tOyAvLyBBZGp1c3QgaW5kZXggYWZ0ZXIgcmVtb3ZhbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgaWYgKGhhc051bGxDaGlsZHJlbikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NsZWFuZWQgbnVsbCBjaGlsZHJlbiBmcm9tIHNjZW5lIGdyYXBoIGFmdGVyIGNoZWNraW5nJywgbnVsbENoZWNrQ291bnQsICdvYmplY3RzJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBVcGRhdGUgY29udHJvbHMgYW5kIHJlbmRlclxyXG4gICAgICAgIC8vIFZhbGlkYXRlIGNvbnRyb2xzIHN0YXRlIGJlZm9yZSB1cGRhdGluZ1xyXG4gICAgICAgIGlmIChjb250cm9sc1JlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgICAvLyBDaGVjayBpZiBjb250cm9scyB0YXJnZXQgaXMgdmFsaWRcclxuICAgICAgICAgIGlmICghaXNGaW5pdGUoY29udHJvbHNSZWYuY3VycmVudC50YXJnZXQueCkgfHxcclxuICAgICAgICAgICAgICAhaXNGaW5pdGUoY29udHJvbHNSZWYuY3VycmVudC50YXJnZXQueSkgfHxcclxuICAgICAgICAgICAgICAhaXNGaW5pdGUoY29udHJvbHNSZWYuY3VycmVudC50YXJnZXQueikpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdPcmJpdENvbnRyb2xzIHRhcmdldCBiZWNhbWUgaW52YWxpZCwgcmVzZXR0aW5nIHRvIG9yaWdpbicpO1xyXG4gICAgICAgICAgICBjb250cm9sc1JlZi5jdXJyZW50LnRhcmdldC5zZXQoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgY29udHJvbHNSZWYuY3VycmVudC51cGRhdGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENsZWFuIHVwIGFueSBudWxsIG9iamVjdHMgaW4gdGhlIHNjZW5lIGJlZm9yZSByZW5kZXJpbmdcclxuICAgICAgICBjb25zdCBjbGVhbnVwTnVsbE9iamVjdHMgPSAob2JqOiBUSFJFRS5PYmplY3QzRCkgPT4ge1xyXG4gICAgICAgICAgaWYgKCFvYmogfHwgIW9iai5jaGlsZHJlbikgcmV0dXJuO1xyXG5cclxuICAgICAgICAgIC8vIEZpbHRlciBvdXQgbnVsbC91bmRlZmluZWQgY2hpbGRyZW5cclxuICAgICAgICAgIGNvbnN0IHZhbGlkQ2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gb2JqLmNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGQgIT09IG51bGwgJiYgY2hpbGQgIT09IHVuZGVmaW5lZCAmJiBjaGlsZC52aXNpYmxlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICB2YWxpZENoaWxkcmVuLnB1c2goY2hpbGQpO1xyXG4gICAgICAgICAgICAgIGNsZWFudXBOdWxsT2JqZWN0cyhjaGlsZCk7IC8vIFJlY3Vyc2l2ZWx5IGNsZWFuIGNoaWxkcmVuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBPbmx5IHVwZGF0ZSBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZ1xyXG4gICAgICAgICAgaWYgKHZhbGlkQ2hpbGRyZW4ubGVuZ3RoICE9PSBvYmouY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIG9iai5jaGlsZHJlbiA9IHZhbGlkQ2hpbGRyZW47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHNjZW5lUmVmLmN1cnJlbnQpIHtcclxuICAgICAgICAgIGNsZWFudXBOdWxsT2JqZWN0cyhzY2VuZVJlZi5jdXJyZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlbmRlcmVyUmVmLmN1cnJlbnQucmVuZGVyKHNjZW5lUmVmLmN1cnJlbnQsIGNhbWVyYVJlZi5jdXJyZW50KTtcclxuXHJcbiAgICAgICAgLy8gUmVzZXQgZXJyb3IgY291bnRlciBvbiBzdWNjZXNzZnVsIHJlbmRlclxyXG4gICAgICAgIGlmIChlcnJvckNvdW50UmVmLmN1cnJlbnQgPiAwKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnUmVuZGVyaW5nIHJlY292ZXJlZCBhZnRlcicsIGVycm9yQ291bnRSZWYuY3VycmVudCwgJ2Vycm9ycycpO1xyXG4gICAgICAgICAgZXJyb3JDb3VudFJlZi5jdXJyZW50ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgZXJyb3JDb3VudFJlZi5jdXJyZW50ID0gKGVycm9yQ291bnRSZWYuY3VycmVudCB8fCAwKSArIDE7XHJcblxyXG4gICAgICAgIGlmIChlcnJvckNvdW50UmVmLmN1cnJlbnQgPT09IDEpIHtcclxuICAgICAgICAgIC8vIE9ubHkgbG9nIGRldGFpbGVkIGluZm8gb24gZmlyc3QgZXJyb3JcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZpcnN0IGVycm9yIGluIGFuaW1hdGlvbiBsb29wOicsIGVycm9yKTtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NjZW5lIGNoaWxkcmVuIGNvdW50OicsIHNjZW5lUmVmLmN1cnJlbnQuY2hpbGRyZW4ubGVuZ3RoKTtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NjZW5lIHN0YXRlOicsIHNjZW5lUmVmLmN1cnJlbnQpO1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignQ2FtZXJhIHN0YXRlOicsIGNhbWVyYVJlZi5jdXJyZW50KTtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvbnRyb2xzIHN0YXRlOicsIGNvbnRyb2xzUmVmLmN1cnJlbnQpO1xyXG5cclxuICAgICAgICAgIC8vIExvZyB0aGUgbW9kZWwgZ3JvdXAgc3RhdGVcclxuICAgICAgICAgIGlmIChtb2RlbEdyb3VwUmVmLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignTW9kZWwgZ3JvdXAgc3RhdGU6JywgbW9kZWxHcm91cFJlZi5jdXJyZW50KTtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignTW9kZWwgdmlzaWJsZTonLCBtb2RlbEdyb3VwUmVmLmN1cnJlbnQudmlzaWJsZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ01vZGVsIGNoaWxkcmVuIGNvdW50OicsIG1vZGVsR3JvdXBSZWYuY3VycmVudC5jaGlsZHJlbi5sZW5ndGgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU3RvcCBhbmltYXRpb24gYWZ0ZXIgdG9vIG1hbnkgZXJyb3JzXHJcbiAgICAgICAgaWYgKGVycm9yQ291bnRSZWYuY3VycmVudCA+IDEwMCkge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignVG9vIG1hbnkgcmVuZGVyIGVycm9ycywgc3RvcHBpbmcgYW5pbWF0aW9uIGxvb3AnKTtcclxuICAgICAgICAgIGlzQW5pbWF0aW5nUmVmLmN1cnJlbnQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gU3RhcnQgdGhlIGFuaW1hdGlvbiBsb29wXHJcbiAgICBhbmltYXRlKCk7XHJcbiAgICBjb25zb2xlLmxvZygnQW5pbWF0aW9uIGxvb3Agc3RhcnRlZCcpO1xyXG5cclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIC8vIFByb3Blcmx5IGNsZWFuIHVwIGFuaW1hdGlvbiBsb29wXHJcbiAgICAgIGlzQW5pbWF0aW5nUmVmLmN1cnJlbnQgPSBmYWxzZTtcclxuICAgICAgaWYgKGFuaW1hdGlvbklkUmVmLmN1cnJlbnQgIT09IG51bGwpIHtcclxuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25JZFJlZi5jdXJyZW50KTtcclxuICAgICAgICBhbmltYXRpb25JZFJlZi5jdXJyZW50ID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIFRlc3QgY3ViZSBjb21tZW50ZWQgb3V0IC0gTEVHTyBtb2RlbCBzaG91bGQgbG9hZCBpbnN0ZWFkXHJcbiAgLypcclxuICBjb25zdCBjdWJlUmVmID0gdXNlUmVmPFRIUkVFLk1lc2ggfCBudWxsPihudWxsKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICghc2NlbmVSZWYuY3VycmVudCkgcmV0dXJuO1xyXG5cclxuICAgIC8vIFByZXZlbnQgYWRkaW5nIGN1YmUgbXVsdGlwbGUgdGltZXNcclxuICAgIGlmIChjdWJlUmVmLmN1cnJlbnQpIHJldHVybjtcclxuXHJcbiAgICAvLyBBZGQgYSBzaW1wbGUgcmVkIGN1YmUgdGhhdCB3ZSBrbm93IHdvcmtzXHJcbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgzMCwgMzAsIDMwKTtcclxuICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtcclxuICAgICAgY29sb3I6IDB4ZmYwMDAwLFxyXG4gICAgICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGN1YmUgPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgY3ViZS5wb3NpdGlvbi5zZXQoMCwgMzAwLCAwKTtcclxuXHJcbiAgICBzY2VuZVJlZi5jdXJyZW50LmFkZChjdWJlKTtcclxuXHJcbiAgICBjdWJlUmVmLmN1cnJlbnQgPSBjdWJlO1xyXG4gICAgY29uc29sZS5sb2coJ1NpbXBsZSB0ZXN0IGN1YmUgYWRkZWQgYXQ6JywgY3ViZS5wb3NpdGlvbik7XHJcbiAgICBjb25zb2xlLmxvZygnU2NlbmUgbm93IGhhcycsIHNjZW5lUmVmLmN1cnJlbnQuY2hpbGRyZW4ubGVuZ3RoLCAnY2hpbGRyZW4nKTtcclxuXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAvLyBDb21tZW50ZWQgb3V0IGNsZWFudXAgdG8ga2VlcCB0aGUgY3ViZSB2aXNpYmxlXHJcbiAgICAgIC8vIGlmIChzY2VuZVJlZi5jdXJyZW50ICYmIGN1YmUpIHtcclxuICAgICAgLy8gICBzY2VuZVJlZi5jdXJyZW50LnJlbW92ZShjdWJlKTsgIC8vIEFsc28gbmVlZCB0byBwcmV2ZW50IHJlbW92YWwgZnJvbSBzY2VuZVxyXG4gICAgICAvLyAgIGdlb21ldHJ5LmRpc3Bvc2UoKTtcclxuICAgICAgLy8gICBtYXRlcmlhbC5kaXNwb3NlKCk7XHJcbiAgICAgIC8vIH1cclxuICAgICAgLy8gY3ViZVJlZi5jdXJyZW50ID0gbnVsbDtcclxuICAgIH07XHJcbiAgfSwgW10pO1xyXG4gICovXHJcblxyXG4gIC8vIEN1YmUgYW5pbWF0aW9uIGNvbW1lbnRlZCBvdXQgc2luY2UgY3ViZSBpcyByZW1vdmVkXHJcbiAgLypcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgYW5pbWF0ZSA9ICgpID0+IHtcclxuICAgICAgaWYgKGN1YmVSZWYuY3VycmVudCkge1xyXG4gICAgICAgIGN1YmVSZWYuY3VycmVudC5yb3RhdGlvbi54ICs9IDAuMDE7XHJcbiAgICAgICAgY3ViZVJlZi5jdXJyZW50LnJvdGF0aW9uLnkgKz0gMC4wMTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBpZCA9IHNldEludGVydmFsKGFuaW1hdGUsIDE2KTsgLy8gfjYwZnBzXHJcblxyXG4gICAgLy8gQ29tbWVudGVkIG91dCBpbnRlcnZhbCBjbGVhbnVwXHJcbiAgICAvLyByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChpZCk7XHJcbiAgICByZXR1cm4gKCkgPT4ge307XHJcbiAgfSwgW10pO1xyXG4gICovXHJcblxyXG4gIC8vIExFR08gTE9BRElORyBDT0RFXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIC8vIE5lZWQgZWl0aGVyIG1vZGVsUGF0aCBvciBsZHJhd0NvbnRlbnRcclxuICAgIGlmICgoIW1vZGVsUGF0aCAmJiAhbGRyYXdDb250ZW50KSB8fCAhc2NlbmVSZWYuY3VycmVudCB8fCAhcmVuZGVyZXJSZWYuY3VycmVudCB8fCAhY2FtZXJhUmVmLmN1cnJlbnQpIHJldHVybjtcclxuXHJcbiAgICAvLyBTa2lwIGlmIHdlJ3JlIGFscmVhZHkgbG9hZGluZyB0aGlzIGV4YWN0IG1vZGVsXHJcbiAgICBjb25zdCBjdXJyZW50SWRlbnRpZmllciA9IGxkcmF3Q29udGVudCA/IGBjb250ZW50LSR7bGRyYXdDb250ZW50LnN1YnN0cmluZygwLCAxMDApfWAgOiBtb2RlbFBhdGg7XHJcbiAgICBpZiAoY3VycmVudE1vZGVsUGF0aFJlZi5jdXJyZW50ID09PSBjdXJyZW50SWRlbnRpZmllciAmJiBpc0xvYWRpbmdSZWYuY3VycmVudCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnU2FtZSBtb2RlbCBhbHJlYWR5IGxvYWRpbmcsIHNraXBwaW5nLi4uJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTa2lwIGlmIHRoaXMgbW9kZWwgaXMgYWxyZWFkeSBsb2FkZWRcclxuICAgIGlmIChjdXJyZW50TW9kZWxQYXRoUmVmLmN1cnJlbnQgPT09IGN1cnJlbnRJZGVudGlmaWVyICYmIG1vZGVsR3JvdXBSZWYuY3VycmVudCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnTW9kZWwgYWxyZWFkeSBsb2FkZWQsIHNraXBwaW5nLi4uJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQcmV2ZW50IGNvbmN1cnJlbnQgbG9hZHNcclxuICAgIGlmIChpc0xvYWRpbmdSZWYuY3VycmVudCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnQW5vdGhlciBtb2RlbCBpcyBsb2FkaW5nLCBza2lwcGluZy4uLicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2F2ZSBjYW1lcmEgc3RhdGUgYmVmb3JlIHJlbW92aW5nIG1vZGVsIGlmIHByZXNlcnZlQ2FtZXJhIGlzIHRydWVcclxuICAgIGlmIChwcmVzZXJ2ZUNhbWVyYSAmJiBjYW1lcmFSZWYuY3VycmVudCAmJiBjb250cm9sc1JlZi5jdXJyZW50KSB7XHJcbiAgICAgIHNhdmVkQ2FtZXJhUG9zaXRpb24uY3VycmVudCA9IGNhbWVyYVJlZi5jdXJyZW50LnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICAgIHNhdmVkQ2FtZXJhVGFyZ2V0LmN1cnJlbnQgPSBjb250cm9sc1JlZi5jdXJyZW50LnRhcmdldC5jbG9uZSgpO1xyXG4gICAgICBjb25zb2xlLmxvZygnU2F2ZWQgY2FtZXJhIHBvc2l0aW9uOicsIHNhdmVkQ2FtZXJhUG9zaXRpb24uY3VycmVudCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdTYXZlZCBjYW1lcmEgdGFyZ2V0OicsIHNhdmVkQ2FtZXJhVGFyZ2V0LmN1cnJlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENsZWFuIHVwIHByZXZpb3VzIG1vZGVsIHNhZmVseVxyXG4gICAgaWYgKG1vZGVsR3JvdXBSZWYuY3VycmVudCAmJiBzY2VuZVJlZi5jdXJyZW50KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdSZW1vdmluZyBwcmV2aW91cyBtb2RlbCBmcm9tIHNjZW5lJyk7XHJcbiAgICAgIC8vIE1hcmsgYXMgaW52aXNpYmxlIGZpcnN0IHRvIHByZXZlbnQgcmVuZGVyIGlzc3Vlc1xyXG4gICAgICBtb2RlbEdyb3VwUmVmLmN1cnJlbnQudmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgLy8gUmVtb3ZlIGZyb20gc2NlbmUgb24gbmV4dCB0aWNrXHJcbiAgICAgIGNvbnN0IG1vZGVsVG9SZW1vdmUgPSBtb2RlbEdyb3VwUmVmLmN1cnJlbnQ7XHJcbiAgICAgIG1vZGVsR3JvdXBSZWYuY3VycmVudCA9IG51bGw7XHJcblxyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBpZiAoc2NlbmVSZWYuY3VycmVudCAmJiBtb2RlbFRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnQWN0dWFsbHkgcmVtb3ZpbmcgbW9kZWwgYW5kIGRpc3Bvc2luZyByZXNvdXJjZXMnKTtcclxuICAgICAgICAgIHNjZW5lUmVmLmN1cnJlbnQucmVtb3ZlKG1vZGVsVG9SZW1vdmUpO1xyXG4gICAgICAgICAgLy8gRGlzcG9zZSBvZiBnZW9tZXRyaWVzIGFuZCBtYXRlcmlhbHMgaWYgbmVlZGVkXHJcbiAgICAgICAgICBtb2RlbFRvUmVtb3ZlLnRyYXZlcnNlKChjaGlsZDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZC5nZW9tZXRyeSkgY2hpbGQuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGQubWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZC5tYXRlcmlhbCkpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkLm1hdGVyaWFsLmZvckVhY2goKG1hdDogYW55KSA9PiBtYXQuZGlzcG9zZSgpKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2hpbGQubWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnTW9kZWwgcmVtb3ZhbCBjb21wbGV0ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHJldmVudCBtdWx0aXBsZSBsb2FkcyBvZiB0aGUgc2FtZSBtb2RlbFxyXG4gICAgbGV0IGNhbmNlbGxlZCA9IGZhbHNlO1xyXG4gICAgaXNMb2FkaW5nUmVmLmN1cnJlbnQgPSB0cnVlO1xyXG4gICAgY3VycmVudE1vZGVsUGF0aFJlZi5jdXJyZW50ID0gY3VycmVudElkZW50aWZpZXIgfHwgJ2dlbmVyYXRlZCc7XHJcblxyXG4gICAgLy8gQ2xlYXIgYW55IHByZXZpb3VzIGVycm9yXHJcbiAgICBzZXRMb2FkRXJyb3IobnVsbCk7XHJcblxyXG4gICAgY29uc3QgbG9hZGVyID0gbmV3IExEcmF3TG9hZGVyKGxvYWRpbmdNYW5hZ2VyUmVmLmN1cnJlbnQgPz8gdW5kZWZpbmVkKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIHBhcnRzIGxpYnJhcnkgcGF0aCB0byB0aGUgbGRyYXcgZGlyZWN0b3J5XHJcbiAgICBsb2FkZXIuc2V0UGFydHNMaWJyYXJ5UGF0aCgnL2xkcmF3LycpO1xyXG5cclxuICAgIC8vIEVuYWJsZSBzbW9vdGggbm9ybWFscyBmb3IgYmV0dGVyIHJlbmRlcmluZ1xyXG4gICAgbG9hZGVyLnNtb290aE5vcm1hbHMgPSB0cnVlO1xyXG5cclxuICAgIC8vIFNldCB0aGUgZmlsZSBtYXAgZm9yIGJldHRlciBwYXJ0IHJlc29sdXRpb25cclxuICAgIGxvYWRlci5zZXRGaWxlTWFwKHt9KTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGNvbmRpdGlvbmFsIGxpbmUgbWF0ZXJpYWwgY2xhc3MgKG5vdCBhbiBpbnN0YW5jZSlcclxuICAgIGxvYWRlci5zZXRDb25kaXRpb25hbExpbmVNYXRlcmlhbChMRHJhd0NvbmRpdGlvbmFsTGluZU1hdGVyaWFsKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhsZHJhd0NvbnRlbnQgPyAnTG9hZGluZyBMRHJhdyBmcm9tIGNvbnRlbnQnIDogYExvYWRpbmcgTERSIGZpbGU6ICR7bW9kZWxQYXRofWApO1xyXG5cclxuICAgIC8vIFRyeSB0byBwcmVsb2FkIG1hdGVyaWFscyBmaXJzdCwgYnV0IGRvbid0IGZhaWwgaWYgaXQgZG9lc24ndCB3b3JrXHJcbiAgICBjb25zdCBtYXRlcmlhbHNQcm9taXNlID0gbG9hZGVyLnByZWxvYWRNYXRlcmlhbHMoJy9sZHJhdy9MRENvbmZpZy5sZHInKVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ01hdGVyaWFscyBwcmVsb2FkZWQgc3VjY2Vzc2Z1bGx5Jyk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgcHJlbG9hZCBtYXRlcmlhbHMsIHVzaW5nIGRlZmF1bHRzOicsIGVyci5tZXNzYWdlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gT3ZlcnJpZGUgY29uc29sZS53YXJuIHRvIGNhdGNoIHN1Ym9iamVjdCBsb2FkaW5nIGVycm9yc1xyXG4gICAgY29uc3Qgb3JpZ2luYWxXYXJuID0gY29uc29sZS53YXJuO1xyXG4gICAgbGV0IGhhc1N1Ym9iamVjdEVycm9yID0gZmFsc2U7XHJcbiAgICBjb25zb2xlLndhcm4gPSAoLi4uYXJncykgPT4ge1xyXG4gICAgICBjb25zdCBtZXNzYWdlID0gYXJncy5qb2luKCcgJyk7XHJcbiAgICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCdjb3VsZCBub3QgYmUgbG9hZGVkJykgfHwgbWVzc2FnZS5pbmNsdWRlcygnU3Vib2JqZWN0JykpIHtcclxuICAgICAgICBoYXNTdWJvYmplY3RFcnJvciA9IHRydWU7XHJcbiAgICAgICAgLy8gRG9uJ3QgbG9nIHRoZSB3YXJuaW5nIHRvIGNvbnNvbGVcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgb3JpZ2luYWxXYXJuLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBMb2FkIHRoZSBtb2RlbCAod2FpdCBmb3IgbWF0ZXJpYWxzIGlmIHBvc3NpYmxlLCBidXQgZG9uJ3QgYmxvY2spXHJcbiAgICBtYXRlcmlhbHNQcm9taXNlXHJcbiAgICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgICBpZiAoY2FuY2VsbGVkKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vIElmIHdlIGhhdmUgZGlyZWN0IGNvbnRlbnQsIHBhcnNlIGl0OyBvdGhlcndpc2UgbG9hZCBmcm9tIGZpbGVcclxuICAgICAgICBsZXQgbW9kZWxQcm9taXNlOiBQcm9taXNlPFRIUkVFLkdyb3VwIHwgbnVsbD47XHJcblxyXG4gICAgICAgIGlmIChsZHJhd0NvbnRlbnQpIHtcclxuICAgICAgICAgIC8vIFVzZSBwYXJzZSB3aXRoIGNhbGxiYWNrcyBhbmQgd3JhcCBpbiBhIHByb21pc2VcclxuICAgICAgICAgIG1vZGVsUHJvbWlzZSA9IG5ldyBQcm9taXNlPFRIUkVFLkdyb3VwIHwgbnVsbD4oKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgbG9hZGVyLnBhcnNlKFxyXG4gICAgICAgICAgICAgIGxkcmF3Q29udGVudCxcclxuICAgICAgICAgICAgICAoZ3JvdXA6IFRIUkVFLkdyb3VwKSA9PiByZXNvbHZlKGdyb3VwKSxcclxuICAgICAgICAgICAgICAoZXJyb3I6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcGFyc2luZyBMRHJhdyBjb250ZW50OicsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtb2RlbFBhdGgpIHtcclxuICAgICAgICAgIG1vZGVsUHJvbWlzZSA9IGxvYWRlci5sb2FkQXN5bmMobW9kZWxQYXRoKS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBtb2RlbDonLCBlcnJvcik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG1vZGVsUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShudWxsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG1vZGVsUHJvbWlzZS50aGVuKChncm91cCkgPT4ge1xyXG4gICAgICAgICAgLy8gUmVzdG9yZSBvcmlnaW5hbCBjb25zb2xlLndhcm5cclxuICAgICAgICAgIGNvbnNvbGUud2FybiA9IG9yaWdpbmFsV2FybjtcclxuXHJcbiAgICAgICAgICBpZiAoIWdyb3VwIHx8IGNhbmNlbGxlZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZXJlIHdlcmUgc3Vib2JqZWN0IGVycm9yc1xyXG4gICAgICAgICAgaWYgKGhhc1N1Ym9iamVjdEVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdNb2RlbCBoYXMgbWlzc2luZyBwYXJ0cywgZGlzcGxheWluZyBhcyBlcnJvcicpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcGFydHMgLSBtb2RlbCBjYW5ub3QgYmUgcmVuZGVyZWQgcHJvcGVybHknKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnTW9kZWwgbG9hZGVkIHN1Y2Nlc3NmdWxseTonLCBncm91cCk7XHJcbiAgICAgICAgICBpc0xvYWRpbmdSZWYuY3VycmVudCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgIC8vIFNhZmUgdHJhdmVyc2FsIHRvIGhhbmRsZSBudWxsIG9iamVjdHMgLSBqdXN0IHNraXAgdGhlbVxyXG4gICAgICAgICAgY29uc3Qgc2FmZVRyYXZlcnNlID0gKG9iajogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIFNraXAgaWYgbnVsbCBvciB1bmRlZmluZWRcclxuICAgICAgICAgICAgaWYgKCFvYmopIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIC8vIFNraXAgaWYgbm90IGEgdmFsaWQgb2JqZWN0XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JykgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLy8gU2tpcCBpZiBkb2Vzbid0IGhhdmUgdmlzaWJsZSBwcm9wZXJ0eSAobm90IGEgVGhyZWUuanMgb2JqZWN0KVxyXG4gICAgICAgICAgICBpZiAoISgndmlzaWJsZScgaW4gb2JqKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLy8gUHJvY2VzcyB0aGlzIG9iamVjdFxyXG4gICAgICAgICAgICBpZiAoKG9iaiBhcyBhbnkpLmlzTWVzaCkge1xyXG4gICAgICAgICAgICAgIGNvbnN0IG1lc2ggPSBvYmogYXMgVEhSRUUuTWVzaDtcclxuICAgICAgICAgICAgICBpZiAoIW1lc2gubWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIGRlZmF1bHQgbWF0ZXJpYWwgaWYgbWlzc2luZ1xyXG4gICAgICAgICAgICAgICAgbWVzaC5tYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAweDgwODA4MCxcclxuICAgICAgICAgICAgICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQWRkZWQgZGVmYXVsdCBtYXRlcmlhbCB0byBtZXNoOicsIG1lc2gubmFtZSk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG1lc2gubWF0ZXJpYWwpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBhcnJheSBvZiBtYXRlcmlhbHNcclxuICAgICAgICAgICAgICAgIG1lc2gubWF0ZXJpYWwgPSBtZXNoLm1hdGVyaWFsLm1hcCgobWF0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGlmICghbWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlcGxhY2luZyBudWxsIG1hdGVyaWFsIGluIGFycmF5Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogMHg4MDgwODAsXHJcbiAgICAgICAgICAgICAgICAgICAgICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU2FmZWx5IHByb2Nlc3MgY2hpbGRyZW4gLSBqdXN0IHNraXAgbnVsbCBvbmVzXHJcbiAgICAgICAgICAgIGlmIChvYmouY2hpbGRyZW4gJiYgQXJyYXkuaXNBcnJheShvYmouY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBvYmouY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIC8vIFNpbXBseSBza2lwIG51bGwvdW5kZWZpbmVkIGNoaWxkcmVuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgc2FmZVRyYXZlcnNlKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgc2FmZVRyYXZlcnNlKGdyb3VwKTtcclxuXHJcbiAgICAgICAgLy8gU2tpcCBzdGVwIHBhcnNpbmcgZm9yIG5vdyAtIGp1c3QgYWRkIHRoZSBtb2RlbCBhcy1pc1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgLy8gUGFyc2UgU1RFUCBjb21tYW5kcyBmcm9tIHRoZSBMRHJhdyBjb250ZW50IGlmIGF2YWlsYWJsZVxyXG4gICAgICAgIGxldCBzdGVwQm91bmRhcmllczogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICBpZiAoY29udGVudCkge1xyXG4gICAgICAgICAgY29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KCdcXG4nKTtcclxuICAgICAgICAgIGxldCBwYXJ0Q291bnQgPSAwO1xyXG4gICAgICAgICAgbGluZXMuZm9yRWFjaChsaW5lID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdHJpbW1lZCA9IGxpbmUudHJpbSgpO1xyXG4gICAgICAgICAgICBpZiAodHJpbW1lZC5zdGFydHNXaXRoKCcxICcpKSB7XHJcbiAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHBhcnQgbGluZVxyXG4gICAgICAgICAgICAgIHBhcnRDb3VudCsrO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRyaW1tZWQgPT09ICcwIFNURVAnIHx8IHRyaW1tZWQudG9Mb3dlckNhc2UoKSA9PT0gJzAgc3RlcCcpIHtcclxuICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgU1RFUCBjb21tYW5kXHJcbiAgICAgICAgICAgICAgc3RlcEJvdW5kYXJpZXMucHVzaChwYXJ0Q291bnQpO1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBGb3VuZCBTVEVQIGNvbW1hbmQgYWZ0ZXIgcGFydCAke3BhcnRDb3VudH1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBpZiAoc3RlcEJvdW5kYXJpZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgRm91bmQgJHtzdGVwQm91bmRhcmllcy5sZW5ndGh9IFNURVAgY29tbWFuZHMgaW4gbW9kZWxgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE9yZ2FuaXplIG1vZGVsIGludG8gc3RlcHMgYmFzZWQgb24gU1RFUCBjb21tYW5kc1xyXG4gICAgICAgIGNvbnN0IHN0ZXBzOiBUSFJFRS5Hcm91cFtdID0gW107XHJcbiAgICAgICAgY29uc3QgYWxsUGFydHM6IFRIUkVFLk9iamVjdDNEW10gPSBbXTtcclxuXHJcbiAgICAgICAgLy8gQ29sbGVjdCBvbmx5IGRpcmVjdCBjaGlsZCBncm91cHMvb2JqZWN0cyAobm90IG5lc3RlZCBtZXNoZXMpXHJcbiAgICAgICAgLy8gRWFjaCBkaXJlY3QgY2hpbGQgdHlwaWNhbGx5IHJlcHJlc2VudHMgb25lIHBhcnQgZnJvbSB0aGUgTERyYXcgZmlsZVxyXG4gICAgICAgIGNvbnN0IGNvbGxlY3RUb3BMZXZlbFBhcnRzID0gKG9iajogYW55LCBkZXB0aDogbnVtYmVyID0gMCkgPT4ge1xyXG4gICAgICAgICAgLy8gRm9yIHRoZSByb290IGdyb3VwLCBwcm9jZXNzIGl0cyBkaXJlY3QgY2hpbGRyZW5cclxuICAgICAgICAgIGlmIChkZXB0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBvYmouY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgIC8vIEVhY2ggZGlyZWN0IGNoaWxkIGlzIHR5cGljYWxseSBhIHBhcnRcclxuICAgICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ0dyb3VwJyB8fCBjaGlsZC50eXBlID09PSAnT2JqZWN0M0QnIHx8IGNoaWxkLmlzTWVzaCB8fCBjaGlsZC5pc0xpbmUpIHtcclxuICAgICAgICAgICAgICAgIGFsbFBhcnRzLnB1c2goY2hpbGQpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29sbGVjdFRvcExldmVsUGFydHMoZ3JvdXApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBGb3VuZCAke2FsbFBhcnRzLmxlbmd0aH0gdG9wLWxldmVsIHBhcnRzIGluIG1vZGVsYCk7XHJcblxyXG4gICAgICAgIC8vIElmIHdlIGhhdmUgU1RFUCBjb21tYW5kcywgb3JnYW5pemUgcGFydHMgYWNjb3JkaW5nbHlcclxuICAgICAgICBpZiAoc3RlcEJvdW5kYXJpZXMubGVuZ3RoID4gMCAmJiBhbGxQYXJ0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBjb25zdCB0b3RhbFN0ZXBzID0gc3RlcEJvdW5kYXJpZXMubGVuZ3RoO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYE9yZ2FuaXppbmcgJHthbGxQYXJ0cy5sZW5ndGh9IHBhcnRzIGludG8gJHt0b3RhbFN0ZXBzfSBzdGVwc2ApO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYFN0ZXAgYm91bmRhcmllcyAoY3VtdWxhdGl2ZSBwYXJ0IGNvdW50cyk6ICR7c3RlcEJvdW5kYXJpZXMuam9pbignLCAnKX1gKTtcclxuXHJcbiAgICAgICAgICAvLyBBc3NpZ24gc3RlcCBudW1iZXJzIHRvIGVhY2ggcGFydFxyXG4gICAgICAgICAgYWxsUGFydHMuZm9yRWFjaCgocGFydCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgLy8gRmluZCB3aGljaCBzdGVwIHRoaXMgcGFydCBiZWxvbmdzIHRvXHJcbiAgICAgICAgICAgIGxldCBzdGVwTnVtYmVyID0gMTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGVwQm91bmRhcmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgIGlmIChpbmRleCA8IHN0ZXBCb3VuZGFyaWVzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwTnVtYmVyID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEFzc2lnbiBzdGVwIG51bWJlciB0byB0aGlzIHBhcnQgYW5kIGFsbCBpdHMgY2hpbGRyZW5cclxuICAgICAgICAgICAgcGFydC51c2VyRGF0YS5zdGVwTnVtYmVyID0gc3RlcE51bWJlcjtcclxuICAgICAgICAgICAgcGFydC50cmF2ZXJzZSgoY2hpbGQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgIGNoaWxkLnVzZXJEYXRhLnN0ZXBOdW1iZXIgPSBzdGVwTnVtYmVyO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIC8vIENyZWF0ZSBzdGVwIGdyb3VwcyBhbmQgYWRkIHBhcnRzIHRvIHRoZW1cclxuICAgICAgICAgIGZvciAobGV0IHN0ZXBOdW0gPSAxOyBzdGVwTnVtIDw9IHRvdGFsU3RlcHM7IHN0ZXBOdW0rKykge1xyXG4gICAgICAgICAgICBjb25zdCBzdGVwR3JvdXAgPSBuZXcgVEhSRUUuR3JvdXAoKTtcclxuICAgICAgICAgICAgc3RlcEdyb3VwLm5hbWUgPSBgU3RlcCAke3N0ZXBOdW19YDtcclxuICAgICAgICAgICAgbGV0IHBhcnRzSW5TdGVwID0gMDtcclxuXHJcbiAgICAgICAgICAgIGFsbFBhcnRzLmZvckVhY2gocGFydCA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKHBhcnQudXNlckRhdGEuc3RlcE51bWJlciA9PT0gc3RlcE51bSkge1xyXG4gICAgICAgICAgICAgICAgc3RlcEdyb3VwLmFkZChwYXJ0KTtcclxuICAgICAgICAgICAgICAgIHBhcnRzSW5TdGVwKys7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChwYXJ0c0luU3RlcCA+IDApIHtcclxuICAgICAgICAgICAgICBzdGVwcy5wdXNoKHN0ZXBHcm91cCk7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYFN0ZXAgJHtzdGVwTnVtfTogJHtwYXJ0c0luU3RlcH0gcGFydHNgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gTm8gU1RFUCBjb21tYW5kcyBmb3VuZCwgdHJlYXQgYWxsIHBhcnRzIGFzIG9uZSBzdGVwXHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnTm8gU1RFUCBjb21tYW5kcyBmb3VuZCwgdHJlYXRpbmcgbW9kZWwgYXMgc2luZ2xlIHN0ZXAnKTtcclxuICAgICAgICAgIGNvbnN0IHNpbmdsZVN0ZXAgPSBuZXcgVEhSRUUuR3JvdXAoKTtcclxuICAgICAgICAgIHNpbmdsZVN0ZXAubmFtZSA9ICdTdGVwIDEnO1xyXG4gICAgICAgICAgYWxsUGFydHMuZm9yRWFjaChwYXJ0ID0+IHtcclxuICAgICAgICAgICAgcGFydC51c2VyRGF0YS5zdGVwTnVtYmVyID0gMTtcclxuICAgICAgICAgICAgcGFydC50cmF2ZXJzZSgoY2hpbGQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgIGNoaWxkLnVzZXJEYXRhLnN0ZXBOdW1iZXIgPSAxO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc2luZ2xlU3RlcC5hZGQocGFydCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGlmIChzaW5nbGVTdGVwLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgc3RlcHMucHVzaChzaW5nbGVTdGVwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENvbGxlY3QgYWxsIG1lc2gvbGluZSBvYmplY3RzIGZvciB2aXNpYmlsaXR5IGNvbnRyb2xcclxuICAgICAgICBjb25zdCBhbGxSZW5kZXJhYmxlczogVEhSRUUuT2JqZWN0M0RbXSA9IFtdO1xyXG4gICAgICAgIGdyb3VwLnRyYXZlcnNlKChjaGlsZDogYW55KSA9PiB7XHJcbiAgICAgICAgICBpZiAoY2hpbGQuaXNNZXNoIHx8IGNoaWxkLmlzTGluZSB8fCBjaGlsZC5pc0xpbmVTZWdtZW50cykge1xyXG4gICAgICAgICAgICBhbGxSZW5kZXJhYmxlcy5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coYE1vZGVsIG9yZ2FuaXplZCBpbnRvICR7c3RlcHMubGVuZ3RofSBzdGVwcyB3aXRoICR7YWxsUmVuZGVyYWJsZXMubGVuZ3RofSByZW5kZXJhYmxlIG9iamVjdHNgKTtcclxuICAgICAgICBzdGVwc1JlZi5jdXJyZW50ID0gc3RlcHM7XHJcbiAgICAgICAgYWxsUGFydHNSZWYuY3VycmVudCA9IGFsbFJlbmRlcmFibGVzO1xyXG4gICAgICAgIHNldFRvdGFsU3RlcHMoc3RlcHMubGVuZ3RoKTtcclxuICAgICAgICBzZXRDdXJyZW50U3RlcChzdGVwcy5sZW5ndGgpOyAvLyBTdGFydCB3aXRoIGFsbCBzdGVwcyB2aXNpYmxlXHJcbiAgICAgICAgKi9cclxuXHJcbiAgICAgICAgLy8gUG9zaXRpb24gbW9kZWwgYXQgb3JpZ2luXHJcbiAgICAgICAgZ3JvdXAucG9zaXRpb24uc2V0KDAsIDAsIDApO1xyXG4gICAgICAgIGdyb3VwLnJvdGF0aW9uLnggPSBNYXRoLlBJOyAgLy8gUm90YXRpb24gY2FuIGNhdXNlIGlzc3Vlcywga2VlcGluZyBpdCBjb21tZW50ZWRcclxuICAgICAgICBtb2RlbEdyb3VwUmVmLmN1cnJlbnQgPSBncm91cDtcclxuXHJcbiAgICAgICAgaWYgKHNjZW5lUmVmLmN1cnJlbnQpIHtcclxuICAgICAgICAgIHNjZW5lUmVmLmN1cnJlbnQuYWRkKGdyb3VwKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdNb2RlbCBhZGRlZCB0byBzY2VuZScpO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ0dyb3VwIGNoaWxkcmVuOicsIGdyb3VwLmNoaWxkcmVuLmxlbmd0aCk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnR3JvdXAgdmlzaWJsZTonLCBncm91cC52aXNpYmxlKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdHcm91cCBpbiBzY2VuZTonLCBzY2VuZVJlZi5jdXJyZW50LmNoaWxkcmVuLmluY2x1ZGVzKGdyb3VwKSk7XHJcblxyXG4gICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBncm91cCBpcyB2aXNpYmxlXHJcbiAgICAgICAgICBncm91cC52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgIGdyb3VwLnRyYXZlcnNlKChjaGlsZDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNoaWxkLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgLy8gQ291bnQgdmlzaWJsZSBtZXNoZXMgYW5kIGNoZWNrIG1hdGVyaWFsc1xyXG4gICAgICAgICAgbGV0IG1lc2hDb3VudCA9IDA7XHJcbiAgICAgICAgICBsZXQgdmlzaWJsZUNvdW50ID0gMDtcclxuICAgICAgICAgIGdyb3VwLnRyYXZlcnNlKChjaGlsZDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICgoY2hpbGQgYXMgYW55KS5pc01lc2gpIHtcclxuICAgICAgICAgICAgICBtZXNoQ291bnQrKztcclxuICAgICAgICAgICAgICBjb25zdCBtZXNoID0gY2hpbGQgYXMgVEhSRUUuTWVzaDtcclxuICAgICAgICAgICAgICBpZiAobWVzaC52aXNpYmxlKSB2aXNpYmxlQ291bnQrKztcclxuXHJcbiAgICAgICAgICAgICAgaWYgKCFtZXNoLmdlb21ldHJ5LmJvdW5kaW5nQm94KSB7XHJcbiAgICAgICAgICAgICAgICBtZXNoLmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveCgpO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgLy8gTG9nIG1lc2ggZGV0YWlsc1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdNZXNoIGRldGFpbHM6Jywge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogbWVzaC5uYW1lLFxyXG4gICAgICAgICAgICAgICAgdmlzaWJsZTogbWVzaC52aXNpYmxlLFxyXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWw6IG1lc2gubWF0ZXJpYWwsXHJcbiAgICAgICAgICAgICAgICBnZW9tZXRyeVZlcnRpY2VzOiBtZXNoLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24/LmNvdW50IHx8IDAsXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogbWVzaC5wb3NpdGlvbixcclxuICAgICAgICAgICAgICAgIHNjYWxlOiBtZXNoLnNjYWxlXHJcbiAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBtZXNoIGhhcyBhIG1hdGVyaWFsXHJcbiAgICAgICAgICAgICAgaWYgKCFtZXNoLm1hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ01lc2ggaGFzIG5vIG1hdGVyaWFsLCBhZGRpbmcgZGVmYXVsdCcpO1xyXG4gICAgICAgICAgICAgICAgbWVzaC5tYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAweGZmMDAwMCxcclxuICAgICAgICAgICAgICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGBGb3VuZCAke21lc2hDb3VudH0gbWVzaGVzLCAke3Zpc2libGVDb3VudH0gdmlzaWJsZWApO1xyXG5cclxuICAgICAgICAgIC8vIFRlc3QgY3ViZSByZW1vdmVkIC0gcmVuZGVyaW5nIHZlcmlmaWVkIHRvIGJlIHdvcmtpbmdcclxuICAgICAgICAgIC8vIGNvbnN0IHRlc3RHZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSg1MCwgNTAsIDUwKTtcclxuICAgICAgICAgIC8vIGNvbnN0IHRlc3RNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IGNvbG9yOiAweDAwZmYwMCB9KTtcclxuICAgICAgICAgIC8vIGNvbnN0IHRlc3RDdWJlID0gbmV3IFRIUkVFLk1lc2godGVzdEdlb21ldHJ5LCB0ZXN0TWF0ZXJpYWwpO1xyXG4gICAgICAgICAgLy8gdGVzdEN1YmUucG9zaXRpb24uc2V0KDEwMCwgMjUsIDApO1xyXG4gICAgICAgICAgLy8gc2NlbmVSZWYuY3VycmVudC5hZGQodGVzdEN1YmUpO1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ1Rlc3QgY3ViZSBhZGRlZCBhdDonLCB0ZXN0Q3ViZS5wb3NpdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBGb3JjZSB1cGRhdGUgbWF0cmljZXMgYmVmb3JlIGNhbGN1bGF0aW5nIGJvdW5kaW5nIGJveFxyXG4gICAgICAgIGdyb3VwLnVwZGF0ZU1hdHJpeFdvcmxkKHRydWUpO1xyXG5cclxuICAgICAgICAvLyBDYWxjdWxhdGUgYm91bmRpbmcgYm94IGFuZCBjZW50ZXIgY2FtZXJhXHJcbiAgICAgICAgY29uc3QgYm94ID0gbmV3IFRIUkVFLkJveDMoKS5zZXRGcm9tT2JqZWN0KGdyb3VwKTtcclxuICAgICAgICBjb25zdCBjZW50ZXIgPSBib3guZ2V0Q2VudGVyKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG4gICAgICAgIGNvbnN0IHNpemUgPSBib3guZ2V0U2l6ZShuZXcgVEhSRUUuVmVjdG9yMygpKTtcclxuXHJcbiAgICAgICAgLy8gTG9nIG1vZGVsIGluZm9ybWF0aW9uXHJcbiAgICAgICAgaWYgKCFib3guaXNFbXB0eSgpICYmIHNpemUueCA+IDAgJiYgc2l6ZS55ID4gMCAmJiBzaXplLnogPiAwKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnTW9kZWwgY2VudGVyOicsIGNlbnRlci54LCBjZW50ZXIueSwgY2VudGVyLnopO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ01vZGVsIHNpemU6Jywgc2l6ZS54LCBzaXplLnksIHNpemUueik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybignTW9kZWwgaGFzIGVtcHR5L2ludmFsaWQgYm91bmRpbmcgYm94Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29udHJvbHNSZWYuY3VycmVudCAmJiBjYW1lcmFSZWYuY3VycmVudCkge1xyXG4gICAgICAgICAgLy8gUmVzdG9yZSBjYW1lcmEgcG9zaXRpb24gaWYgcHJlc2VydmVDYW1lcmEgaXMgdHJ1ZSBhbmQgd2UgaGF2ZSBzYXZlZCBzdGF0ZVxyXG4gICAgICAgICAgaWYgKHByZXNlcnZlQ2FtZXJhICYmIHNhdmVkQ2FtZXJhUG9zaXRpb24uY3VycmVudCAmJiBzYXZlZENhbWVyYVRhcmdldC5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZXN0b3JpbmcgY2FtZXJhIHBvc2l0aW9uJyk7XHJcbiAgICAgICAgICAgIGNhbWVyYVJlZi5jdXJyZW50LnBvc2l0aW9uLmNvcHkoc2F2ZWRDYW1lcmFQb3NpdGlvbi5jdXJyZW50KTtcclxuICAgICAgICAgICAgY29udHJvbHNSZWYuY3VycmVudC50YXJnZXQuY29weShzYXZlZENhbWVyYVRhcmdldC5jdXJyZW50KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEp1c3QgdXBkYXRlIGNvbnRyb2xzIHRvIGxvb2sgYXQgb3JpZ2luIGZvciBpbml0aWFsIGxvYWRcclxuICAgICAgICAgICAgY29udHJvbHNSZWYuY3VycmVudC50YXJnZXQuc2V0KDAsIDAsIDApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29udHJvbHNSZWYuY3VycmVudC51cGRhdGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRoZSBhbmltYXRpb24gbG9vcCB3aWxsIGhhbmRsZSByZW5kZXJpbmdcclxuICAgICAgICBjb25zb2xlLmxvZygnU2NlbmUgY2hpbGRyZW46Jywgc2NlbmVSZWYuY3VycmVudD8uY2hpbGRyZW4ubGVuZ3RoIHx8IDApO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgLy8gUmVzdG9yZSBvcmlnaW5hbCBjb25zb2xlLndhcm4gaW4gY2FzZSBvZiBlcnJvclxyXG4gICAgICAgIGNvbnNvbGUud2FybiA9IG9yaWdpbmFsV2FybjtcclxuXHJcbiAgICAgICAgaWYgKGNhbmNlbGxlZCkgcmV0dXJuO1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgbW9kZWw6JywgZXJyb3IpO1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01vZGVsIHBhdGg6JywgbW9kZWxQYXRoKTtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdTdGFjayB0cmFjZTonLCBlcnJvci5zdGFjayk7XHJcbiAgICAgICAgaXNMb2FkaW5nUmVmLmN1cnJlbnQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8gU2V0IGVycm9yIG1lc3NhZ2UgZm9yIGRpc3BsYXlcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gJ0J1aWxkIGZhaWxlZCB0byByZW5kZXInO1xyXG4gICAgICAgIGlmIChlcnJvci5tZXNzYWdlKSB7XHJcbiAgICAgICAgICAvLyBDaGVjayBpZiBpdCdzIGEgbWlzc2luZyBwYXJ0cyBlcnJvclxyXG4gICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ01pc3NpbmcgcGFydHMnKSkge1xyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSAnQ2Fubm90IGJlIHJlbmRlcmVkXFxuTWlzc2luZyBMRUdPIHBhcnRzJztcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEV4dHJhY3QgdGhlIHNwZWNpZmljIHBhcnQgdGhhdCBmYWlsZWQgaWYgYXZhaWxhYmxlXHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnRNYXRjaCA9IGVycm9yLm1lc3NhZ2UubWF0Y2goL1wiKFteXCJdK1xcLmRhdClcIi8pO1xyXG4gICAgICAgICAgICBpZiAocGFydE1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gYEJ1aWxkIGZhaWxlZCB0byByZW5kZXJcXG5JbnZhbGlkIHBhcnQ6ICR7cGFydE1hdGNoWzFdfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0TG9hZEVycm9yKGVycm9yTWVzc2FnZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB9KTsgIC8vIENsb3NlIHRoZSAuZmluYWxseSgpIGJsb2NrXHJcblxyXG4gICAgLy8gQ2xlYW51cCBmdW5jdGlvbiAtIG9ubHkgcmVtb3ZlIG1vZGVsIGlmIHBhdGggY2hhbmdlcyBvciBjb21wb25lbnQgdW5tb3VudHNcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIGNhbmNlbGxlZCA9IHRydWU7XHJcbiAgICAgIC8vIFJlc3RvcmUgb3JpZ2luYWwgY29uc29sZS53YXJuIGlmIGl0J3MgYmVlbiBvdmVycmlkZGVuXHJcbiAgICAgIGlmIChjb25zb2xlLndhcm4gIT09IG9yaWdpbmFsV2Fybikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybiA9IG9yaWdpbmFsV2FybjtcclxuICAgICAgfVxyXG4gICAgICAvLyBEb24ndCBjbGVhciB0aGUgbW9kZWwgaGVyZSAtIGl0IHdpbGwgYmUgY2xlYXJlZCB3aGVuIGEgbmV3IG1vZGVsIGxvYWRzXHJcbiAgICAgIC8vIG9yIHdoZW4gdGhlIGNvbXBvbmVudCB1bm1vdW50c1xyXG4gICAgfTtcclxuICB9LCBbbW9kZWxQYXRoLCBsZHJhd0NvbnRlbnRdKTtcclxuXHJcbiAgLy8gQ2xlYW4gdXAgbW9kZWwgd2hlbiBjb21wb25lbnQgdW5tb3VudHNcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgaWYgKG1vZGVsR3JvdXBSZWYuY3VycmVudCAmJiBzY2VuZVJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgLy8gTWFyayBhcyBpbnZpc2libGUgZmlyc3RcclxuICAgICAgICBtb2RlbEdyb3VwUmVmLmN1cnJlbnQudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIC8vIFRoZW4gcmVtb3ZlXHJcbiAgICAgICAgc2NlbmVSZWYuY3VycmVudC5yZW1vdmUobW9kZWxHcm91cFJlZi5jdXJyZW50KTtcclxuICAgICAgICBtb2RlbEdyb3VwUmVmLmN1cnJlbnQgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIGlzTG9hZGluZ1JlZi5jdXJyZW50ID0gZmFsc2U7XHJcbiAgICAgIGN1cnJlbnRNb2RlbFBhdGhSZWYuY3VycmVudCA9ICcnO1xyXG4gICAgfTtcclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIFVwZGF0ZSB2aXNpYmlsaXR5IGJhc2VkIG9uIGN1cnJlbnQgc3RlcFxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoYWxsUGFydHNSZWYuY3VycmVudC5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhgVXBkYXRpbmcgdmlzaWJpbGl0eSBmb3Igc3RlcCAke2N1cnJlbnRTdGVwfSBvZiAke3RvdGFsU3RlcHN9YCk7XHJcblxyXG4gICAgLy8gU2hvdy9oaWRlIHBhcnRzIGJhc2VkIG9uIGN1cnJlbnQgc3RlcFxyXG4gICAgYWxsUGFydHNSZWYuY3VycmVudC5mb3JFYWNoKHBhcnQgPT4ge1xyXG4gICAgICBjb25zdCBwYXJ0U3RlcCA9IHBhcnQudXNlckRhdGEuc3RlcE51bWJlciB8fCAxO1xyXG4gICAgICBwYXJ0LnZpc2libGUgPSBwYXJ0U3RlcCA8PSBjdXJyZW50U3RlcDtcclxuICAgIH0pO1xyXG4gIH0sIFtjdXJyZW50U3RlcCwgdG90YWxTdGVwc10pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBzdHlsZT17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJywgd2lkdGg6ICcxMDAlJyB9fT5cclxuICAgICAgPGRpdlxyXG4gICAgICAgIHJlZj17Y29udGFpbmVyUmVmfVxyXG4gICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgICAgaGVpZ2h0OiAnNjAwcHgnLFxyXG4gICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNjY2MnLFxyXG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiAnOHB4JyxcclxuICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcclxuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXHJcbiAgICAgICAgfX1cclxuICAgICAgPlxyXG4gICAgICAgIHtsb2FkRXJyb3IgJiYgKFxyXG4gICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgICAgICAgICAgIHRvcDogJzUwJScsXHJcbiAgICAgICAgICAgICAgbGVmdDogJzUwJScsXHJcbiAgICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIC01MCUpJyxcclxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOTUpJyxcclxuICAgICAgICAgICAgICBwYWRkaW5nOiAnMjBweCAzMHB4JyxcclxuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc4cHgnLFxyXG4gICAgICAgICAgICAgIGJveFNoYWRvdzogJzAgMnB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjEpJyxcclxuICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxyXG4gICAgICAgICAgICAgIHpJbmRleDogMTAwXHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgY29sb3I6ICcjZDMyZjJmJyxcclxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMThweCcsXHJcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnNjAwJyxcclxuICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogJzhweCdcclxuICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAg4pqg77iPIHtsb2FkRXJyb3Iuc3BsaXQoJ1xcbicpWzBdfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAge2xvYWRFcnJvci5pbmNsdWRlcygnXFxuJykgJiYgKFxyXG4gICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzY2NicsXHJcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTRweCcsXHJcbiAgICAgICAgICAgICAgICAgIG1hcmdpblRvcDogJzhweCdcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAge2xvYWRFcnJvci5zcGxpdCgnXFxuJylbMV19XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICl9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApfVxyXG4gICAgICA8L2Rpdj5cclxuICAgICAge3RvdGFsU3RlcHMgPiAxICYmIChcclxuICAgICAgICA8ZGl2IHN0eWxlPXt7XHJcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgICAgICAgIGJvdHRvbTogJzIwcHgnLFxyXG4gICAgICAgICAgbGVmdDogJzUwJScsXHJcbiAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC01MCUpJyxcclxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC45NSknLFxyXG4gICAgICAgICAgcGFkZGluZzogJzE1cHggMjBweCcsXHJcbiAgICAgICAgICBib3JkZXJSYWRpdXM6ICc4cHgnLFxyXG4gICAgICAgICAgYm94U2hhZG93OiAnMCAycHggMTBweCByZ2JhKDAsMCwwLDAuMiknLFxyXG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXHJcbiAgICAgICAgICBnYXA6ICcxNXB4JyxcclxuICAgICAgICAgIG1pbldpZHRoOiAnNDAwcHgnLFxyXG4gICAgICAgICAgekluZGV4OiAxMDAwXHJcbiAgICAgICAgfX0+XHJcbiAgICAgICAgICA8bGFiZWwgc3R5bGU9e3tcclxuICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxyXG4gICAgICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxyXG4gICAgICAgICAgICBjb2xvcjogJyMzMzMnLFxyXG4gICAgICAgICAgICBtaW5XaWR0aDogJzgwcHgnXHJcbiAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgU3RlcCB7Y3VycmVudFN0ZXB9L3t0b3RhbFN0ZXBzfVxyXG4gICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICB0eXBlPVwicmFuZ2VcIlxyXG4gICAgICAgICAgICBtaW49ezF9XHJcbiAgICAgICAgICAgIG1heD17dG90YWxTdGVwc31cclxuICAgICAgICAgICAgdmFsdWU9e2N1cnJlbnRTdGVwfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldEN1cnJlbnRTdGVwKHBhcnNlSW50KGUudGFyZ2V0LnZhbHVlKSl9XHJcbiAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgZmxleDogMSxcclxuICAgICAgICAgICAgICBoZWlnaHQ6ICc2cHgnLFxyXG4gICAgICAgICAgICAgIGJhY2tncm91bmQ6IGBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICM0Q0FGNTAgMCUsICM0Q0FGNTAgJHsoKGN1cnJlbnRTdGVwIC0gMSkgLyAodG90YWxTdGVwcyAtIDEpKSAqIDEwMH0lLCAjZGRkICR7KChjdXJyZW50U3RlcCAtIDEpIC8gKHRvdGFsU3RlcHMgLSAxKSkgKiAxMDB9JSwgI2RkZCAxMDAlKWAsXHJcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnM3B4JyxcclxuICAgICAgICAgICAgICBvdXRsaW5lOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcidcclxuICAgICAgICAgICAgfX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8ZGl2IHN0eWxlPXt7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgICAgICAgICAgZ2FwOiAnOHB4J1xyXG4gICAgICAgICAgfX0+XHJcbiAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRDdXJyZW50U3RlcChNYXRoLm1heCgxLCBjdXJyZW50U3RlcCAtIDEpKX1cclxuICAgICAgICAgICAgICBkaXNhYmxlZD17Y3VycmVudFN0ZXAgPD0gMX1cclxuICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogJzZweCAxMnB4JyxcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogY3VycmVudFN0ZXAgPiAxID8gJyM0Q0FGNTAnIDogJyNjY2MnLFxyXG4gICAgICAgICAgICAgICAgY29sb3I6ICd3aGl0ZScsXHJcbiAgICAgICAgICAgICAgICBib3JkZXI6ICdub25lJyxcclxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXHJcbiAgICAgICAgICAgICAgICBjdXJzb3I6IGN1cnJlbnRTdGVwID4gMSA/ICdwb2ludGVyJyA6ICdub3QtYWxsb3dlZCcsXHJcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnXHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIOKGkCBQcmV2XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0Q3VycmVudFN0ZXAoTWF0aC5taW4odG90YWxTdGVwcywgY3VycmVudFN0ZXAgKyAxKSl9XHJcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2N1cnJlbnRTdGVwID49IHRvdGFsU3RlcHN9XHJcbiAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICc2cHggMTJweCcsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGN1cnJlbnRTdGVwIDwgdG90YWxTdGVwcyA/ICcjNENBRjUwJyA6ICcjY2NjJyxcclxuICAgICAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxyXG4gICAgICAgICAgICAgICAgY3Vyc29yOiBjdXJyZW50U3RlcCA8IHRvdGFsU3RlcHMgPyAncG9pbnRlcicgOiAnbm90LWFsbG93ZWQnLFxyXG4gICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJ1xyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBOZXh0IOKGklxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldEN1cnJlbnRTdGVwKGN1cnJlbnRTdGVwID09PSB0b3RhbFN0ZXBzID8gMSA6IHRvdGFsU3RlcHMpfVxyXG4gICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnNnB4IDEycHgnLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzIxOTZGMycsXHJcbiAgICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJyxcclxuICAgICAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcclxuICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxyXG4gICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJ1xyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICB7Y3VycmVudFN0ZXAgPT09IHRvdGFsU3RlcHMgPyAnUmVzZXQnIDogJ0FsbCd9XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICl9XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuY29uc3QgTERSVmlld2VyID0gbWVtbyhMRFJWaWV3ZXJDb21wb25lbnQpO1xyXG5leHBvcnQgZGVmYXVsdCBMRFJWaWV3ZXI7XHJcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUVmZmVjdCIsInVzZVJlZiIsIm1lbW8iLCJUSFJFRSIsIk9yYml0Q29udHJvbHMiLCJMRHJhd0xvYWRlciIsIkxEcmF3Q29uZGl0aW9uYWxMaW5lTWF0ZXJpYWwiLCJMRFJWaWV3ZXJDb21wb25lbnQiLCJtb2RlbFBhdGgiLCJsZHJhd0NvbnRlbnQiLCJwcmVzZXJ2ZUNhbWVyYSIsImNvbnRhaW5lclJlZiIsInNjZW5lUmVmIiwicmVuZGVyZXJSZWYiLCJjYW1lcmFSZWYiLCJjb250cm9sc1JlZiIsIm1vZGVsR3JvdXBSZWYiLCJsb2FkaW5nTWFuYWdlclJlZiIsImlzTG9hZGluZ1JlZiIsImN1cnJlbnRNb2RlbFBhdGhSZWYiLCJpc0luaXRpYWxpemVkUmVmIiwiZXJyb3JDb3VudFJlZiIsImxvYWRFcnJvciIsInNldExvYWRFcnJvciIsInVzZVN0YXRlIiwic2F2ZWRDYW1lcmFQb3NpdGlvbiIsInNhdmVkQ2FtZXJhVGFyZ2V0IiwiY3VycmVudFN0ZXAiLCJzZXRDdXJyZW50U3RlcCIsInRvdGFsU3RlcHMiLCJzZXRUb3RhbFN0ZXBzIiwic3RlcHNSZWYiLCJhbGxQYXJ0c1JlZiIsImN1cnJlbnQiLCJtYW5hZ2VyIiwiTG9hZGluZ01hbmFnZXIiLCJzZXRVUkxNb2RpZmllciIsInVybCIsIm5vcm1hbGl6ZWQiLCJyZXBsYWNlIiwiaW5jbHVkZXMiLCJtYXRjaCIsInBhcnRzIiwic3BsaXQiLCJsYXN0VHdvIiwic2xpY2UiLCJ1cmxQYXJ0cyIsImZpbGVuYW1lIiwibGVuZ3RoIiwidG9Mb3dlckNhc2UiLCJoYXNTdWJkaXIiLCJwYXRoUHJlZml4ZXMiLCJwcmVmaXgiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJ1bmRlZmluZWQiLCJjb250YWluZXIiLCJ3aWR0aCIsImNsaWVudFdpZHRoIiwiaGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwic2NlbmUiLCJTY2VuZSIsImJhY2tncm91bmQiLCJDb2xvciIsImNhbWVyYSIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwicG9zaXRpb24iLCJzZXQiLCJyZW5kZXJlciIsIldlYkdMUmVuZGVyZXIiLCJhbnRpYWxpYXMiLCJzZXRTaXplIiwic2V0UGl4ZWxSYXRpbyIsIndpbmRvdyIsImRldmljZVBpeGVsUmF0aW8iLCJhcHBlbmRDaGlsZCIsImRvbUVsZW1lbnQiLCJjb250cm9scyIsImVuYWJsZURhbXBpbmciLCJkYW1waW5nRmFjdG9yIiwiZW5hYmxlUGFuIiwiZW5hYmxlUm90YXRlIiwiZW5hYmxlWm9vbSIsInNjcmVlblNwYWNlUGFubmluZyIsIm1pbkRpc3RhbmNlIiwibWF4RGlzdGFuY2UiLCJ0YXJnZXQiLCJhZGQiLCJBbWJpZW50TGlnaHQiLCJkaXJMaWdodCIsIkRpcmVjdGlvbmFsTGlnaHQiLCJjYXN0U2hhZG93IiwiZmlsbExpZ2h0MSIsImZpbGxMaWdodDIiLCJoZW1pTGlnaHQiLCJIZW1pc3BoZXJlTGlnaHQiLCJheGVzSGVscGVyIiwiQXhlc0hlbHBlciIsImhhbmRsZVJlc2l6ZSIsInciLCJoIiwiYXNwZWN0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb25zb2xlIiwibG9nIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFuaW1hdGlvbklkUmVmIiwiaXNBbmltYXRpbmdSZWYiLCJhbmltYXRlIiwid2FybiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImhhc051bGxDaGlsZHJlbiIsIm51bGxDaGVja0NvdW50IiwidHJhdmVyc2UiLCJjaGlsZCIsImhhc093blByb3BlcnR5IiwiZXJyb3IiLCJjaGlsZHJlbiIsImkiLCJzcGxpY2UiLCJpc0Zpbml0ZSIsIngiLCJ5IiwieiIsInVwZGF0ZSIsImNsZWFudXBOdWxsT2JqZWN0cyIsIm9iaiIsInZhbGlkQ2hpbGRyZW4iLCJ2aXNpYmxlIiwicHVzaCIsInJlbmRlciIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiY3VycmVudElkZW50aWZpZXIiLCJzdWJzdHJpbmciLCJjbG9uZSIsIm1vZGVsVG9SZW1vdmUiLCJzZXRUaW1lb3V0IiwicmVtb3ZlIiwiZ2VvbWV0cnkiLCJkaXNwb3NlIiwibWF0ZXJpYWwiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwibWF0IiwiY2FuY2VsbGVkIiwibG9hZGVyIiwic2V0UGFydHNMaWJyYXJ5UGF0aCIsInNtb290aE5vcm1hbHMiLCJzZXRGaWxlTWFwIiwic2V0Q29uZGl0aW9uYWxMaW5lTWF0ZXJpYWwiLCJtYXRlcmlhbHNQcm9taXNlIiwicHJlbG9hZE1hdGVyaWFscyIsInRoZW4iLCJjYXRjaCIsImVyciIsIm1lc3NhZ2UiLCJvcmlnaW5hbFdhcm4iLCJoYXNTdWJvYmplY3RFcnJvciIsImFyZ3MiLCJqb2luIiwiYXBwbHkiLCJmaW5hbGx5IiwibW9kZWxQcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJwYXJzZSIsImdyb3VwIiwibG9hZEFzeW5jIiwiRXJyb3IiLCJzYWZlVHJhdmVyc2UiLCJpc01lc2giLCJtZXNoIiwiTWVzaFBob25nTWF0ZXJpYWwiLCJjb2xvciIsInNpZGUiLCJEb3VibGVTaWRlIiwibmFtZSIsIm1hcCIsInJvdGF0aW9uIiwiTWF0aCIsIlBJIiwibWVzaENvdW50IiwidmlzaWJsZUNvdW50IiwiYm91bmRpbmdCb3giLCJjb21wdXRlQm91bmRpbmdCb3giLCJnZW9tZXRyeVZlcnRpY2VzIiwiYXR0cmlidXRlcyIsImNvdW50Iiwic2NhbGUiLCJ1cGRhdGVNYXRyaXhXb3JsZCIsImJveCIsIkJveDMiLCJzZXRGcm9tT2JqZWN0IiwiY2VudGVyIiwiZ2V0Q2VudGVyIiwiVmVjdG9yMyIsInNpemUiLCJnZXRTaXplIiwiaXNFbXB0eSIsImNvcHkiLCJzdGFjayIsImVycm9yTWVzc2FnZSIsInBhcnRNYXRjaCIsInBhcnQiLCJwYXJ0U3RlcCIsInVzZXJEYXRhIiwic3RlcE51bWJlciIsImRpdiIsInN0eWxlIiwicmVmIiwiYm9yZGVyIiwiYm9yZGVyUmFkaXVzIiwib3ZlcmZsb3ciLCJ0b3AiLCJsZWZ0IiwidHJhbnNmb3JtIiwiYmFja2dyb3VuZENvbG9yIiwicGFkZGluZyIsImJveFNoYWRvdyIsInRleHRBbGlnbiIsInpJbmRleCIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblRvcCIsImJvdHRvbSIsImRpc3BsYXkiLCJhbGlnbkl0ZW1zIiwiZ2FwIiwibWluV2lkdGgiLCJsYWJlbCIsImlucHV0IiwidHlwZSIsIm1pbiIsIm1heCIsInZhbHVlIiwib25DaGFuZ2UiLCJlIiwicGFyc2VJbnQiLCJmbGV4Iiwib3V0bGluZSIsImN1cnNvciIsImJ1dHRvbiIsIm9uQ2xpY2siLCJkaXNhYmxlZCIsIkxEUlZpZXdlciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./components/LDRViewer.tsx\n"));

/***/ })

});